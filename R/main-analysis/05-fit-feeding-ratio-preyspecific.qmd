---
title: "Prey specific feeding ratio fit"
author: "Viktor Thunell (& Max)"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format: 
  html:
    page-layout: full
    embed-resources: true
knitr: 
  opts_chunk:
    fig.align: center
    out-width: 80%
editor: source
execute: 
  echo: true
  eval: true
  cache: true
---

## Load libraries

```{r libs}
#| message: false
#| warning: false
#| cache: false

# Load libraries, install if needed
pkgs <- c("tidyverse", "tidylog", "devtools", "sdmTMB", "sdmTMBextra", "terra", "mapplots",
          "viridis", "visreg", "modelr", "future", "kableExtra", "ggh4x", "patchwork",
          "purrr", "furrr") 

if(length(setdiff(pkgs,rownames(installed.packages()))) > 0){

    install.packages(setdiff(pkgs, rownames(installed.packages())), dependencies = T)
  
  }

invisible(lapply(pkgs, library, character.only = T))

# Import some plotting functions
# Source code for map plots
# You need:
# devtools::install_github("seananderson/ggsidekick") # not on CRAN; library(ggsidekick)
devtools::source_url("https://raw.githubusercontent.com/VThunell/Lammska_cod-fr/main/R/functions/map-plot.R")
options(ggplot2.continuous.colour = "viridis")
#remotes::install_github("pbs-assess/sdmTMBextra", dependencies = TRUE)
# install.packages("remotes")
#remotes::install_github("pbs-assess/sdmTMB", dependencies = TRUE)

library(ggsidekick)
theme_set(theme_sleek())

set.seed(123)
# Set path
home <- here::here()
```

## Read stomach data and prediction grid

```{r}
#| message: false
#| warning: false
#| cache: false

df <- read_csv(paste0(home, "/data/clean/stomachs.csv")) |>
  mutate(depth_sc = (depth - mean(depth))/sd(depth),
         herring_sc = (herring - mean(herring))/sd(herring),
         saduria_sc = (saduria - mean(saduria))/sd(saduria),          
         sprat_sc = (sprat - mean(sprat))/sd(sprat),
         other_invert_sc = (other_invert - mean(other_invert))/sd(other_invert),
         other_sc = (other - mean(other))/sd(other),
         other_fish_sc = (other_fish - mean(other_fish))/sd(other_fish),
         benth_fish_sc = (benth_fish - mean(benth_fish))/sd(benth_fish),
         year_f = as.factor(year),
         month_f = as.factor(month),
         ices_rect = as.factor(ices_rect),
         pred_length_sc = (pred_length - mean(pred_length)) / sd(pred_length),
         doy_sc = ifelse(!is.na(day_of_year), (day_of_year - mean(day_of_year, na.rm = TRUE))/sd(day_of_year, na.rm = TRUE), NA)
) 

glimpse(df)

pred_grid <- bind_rows(readRDS(paste0(home, "/data/clean/pred_grid_(1_2).rds")),
                       readRDS(paste0(home, "/data/clean/pred_grid_(2_2).rds")))

plot_map +
  geom_raster(data = pred_grid, aes(X*1000, Y*1000, fill = depth))

```


## Filter

```{r}
dfqs <- df |>
  filter(fr_tot > 0,
         between(fr_spr, 0, 1),
         between(fr_her, 0, 1),
         between(fr_sad, 0, 1),
         between(fr_other, 0, 1),
         between(fr_other_invert, 0, 1),
         between(fr_other_fish, 0, 1),
         between(fr_benth_fish, 0, 1),
         !is.na(day_of_year)) |>
  dplyr::select(starts_with("fr")) |>
  map(\(sp) quantile(sp, c(0.95,0.98,0.99)))

dfqs

# filter remove empty stomachs, values above the 99th percentile and day of year that are NA
df_prs <- df |>
  filter(fr_tot > 0,
         between(fr_spr, 0, signif(dfqs$fr_spr[3])),
         between(fr_her, 0, signif(dfqs$fr_her[3])),
         #between(fr_sad, 0, signif(dfqs$fr_tot[3])),
         between(fr_sad, 0, 0.37),
         between(fr_other, 0, signif(dfqs$fr_other[3])),
         between(fr_other_invert, 0, signif(dfqs$fr_other_invert[3])),
         between(fr_other_fish, 0, signif(dfqs$fr_other_fish[3])),
         between(fr_benth_fish, 0, signif(dfqs$fr_benth_fish[3])),
         !is.na(day_of_year)) |>
  mutate(decade = round(year/10) * 10)

```

# We suspect that the amount of food in relation to cod weight in stomachs is decreasing and depends on predator length:

```{r}
df_prs |> 
  group_by(year) |> 
  summarise(mean_fr_spr = mean(fr_spr),
            mean_fr_her = mean(fr_her),
            mean_fr_sad = mean(fr_sad),
            mean_fr_other = mean(fr_other),
            mean_fr_other_invert = mean(fr_other_invert),
            mean_fr_other_fish = mean(fr_other_fish),
            mean_fr_benth_fish = mean(fr_benth_fish)) |>
  pivot_longer(cols = starts_with("mean_fr"), names_to = "pgroup", values_to = "mean_fr" ) |>
  ggplot(aes(year, mean_fr, color = pgroup)) +
  geom_line() +
  facet_wrap(~pgroup) +
  scale_x_continuous(breaks = seq(1965,2015, by = 15))

df_prs |> 
  pivot_longer(cols = starts_with("fr_"), names_to = "pgroup", values_to = "fr" ) |>
  ggplot(aes(pred_length, fr, color = year))  +
  geom_point() +
  facet_wrap(~pgroup)
  #stat_smooth(method = "gam", formula = y ~ s(x, k=3))

df_prs |> 
  filter(fr_tot < 0.05) |> 
  #mutate(size_class = cut_width(pred_length, width = 20, boundary = 0)) |>
  mutate(size_class = ifelse(pred_length < 20, "<20", 
                             ifelse(pred_length > 50, ">50", "20-50"))) |>
  group_by(year, size_class) |> 
  summarise(mean_fr_spr = mean(fr_spr),
            mean_fr_her = mean(fr_her),
            mean_fr_sad = mean(fr_sad),
            mean_fr_other = mean(fr_other),
            mean_fr_other_invert = mean(fr_other_invert),
            mean_fr_other_fish = mean(fr_other_fish),
            mean_fr_benth_fish = mean(fr_benth_fish)) |>
  ungroup() |>
  pivot_longer(cols = starts_with(c("mean_fr")), names_to = "pgroup", values_to = "mean_fr") |>
  ggplot(aes(year, mean_fr, color = size_class)) +
  geom_line() +
  facet_wrap(~pgroup, scales = "free_y") +
  scale_x_continuous(breaks = seq(1963, 2023, by = 20))

```

## Saduria fr

```{r fit saduria mods}
# fitting without spatial and spatiotemporal effects takes 15 sec, spatial model 20. AR1 spatiotemporal model 4 hours.

# missing years
my <- min(df_prs$year):max(df_prs$year)
missing_years <- my[!my %in% unique(df_prs$year)]

# mesh
mesh_prs <- make_mesh(df_prs, c("X", "Y"), cutoff = 6)

sadMod_n3_n <- # deltagamma year_f*pred_length_sc
  sdmTMB(
    data = df_prs,
    formula = fr_sad ~ 0 + factor(year)*pred_length_sc + s(doy_sc, bs = "cc") + depth_sc, 
    mesh = mesh_prs,
    spatial = "off",
    spatiotemporal = "off",
    family = delta_gamma(type = "poisson-link")
)

sadMod_n3_nt <- # deltagamma year_f*pred_length_sc
  sdmTMB(
    data = df_prs,
    formula = fr_sad ~ 0 + factor(year)*pred_length_sc + s(doy_sc, bs = "cc") + depth_sc,
    mesh = mesh_prs,
    spatial = "on",
    spatiotemporal = "off",
    family = tweedie(link = "log")
)

sadMod_n3_s <- # spatial
  sdmTMB(
    data = df_prs,
    formula = fr_sad ~ 0 + year_f*pred_length_sc + s(doy_sc, bs = "cc") + depth_sc,
    mesh = mesh_prs,
    extra_time = missing_years,
    spatial = "on",
    spatiotemporal = "off",
    family = delta_gamma(type = "poisson-link")
)

sadMod_n3_st <- # sptiotemporal
  sdmTMB(
    data = df_prs,
    formula = fr_sad ~ 0 + year_f*pred_length_sc + s(doy_sc, bs = "cc") + depth_sc,
    mesh = mesh_prs,
    time = "year",
    extra_time = missing_years,
    spatial = "on",
    spatiotemporal = "ar1",
    family = delta_gamma(type = "poisson-link")
)

sanity(sadMod_n3_n)
sanity(sadMod_n3_s)
sanity(sadMod_n3_st)

AIC(sadMod_n3_n)
AIC(sadMod_n3_s)
AIC(sadMod_n3_st)
# res_sadMod <- residuals(sadMod_n3, type = "mle-mcmc", mcmc_samples =  sdmTMBextra::predict_mle_mcmc(sadMod_n2, mcmc_iter = 201, mcmc_warmup = 200))

r_df <- bind_rows(tibble(res = residuals(sadMod_n3_n, model = 1), mod = "n hurdle one"),
                  tibble(res = residuals(sadMod_n3_n, model = 2), mod = "n hurdle two"),
                  tibble(res = residuals(sadMod_n3_s, model = 1), mod = "s hurdle one"),
                  tibble(res = residuals(sadMod_n3_s, model = 2), mod = "s hurdle two"),
                  tibble(res = residuals(sadMod_n3_st, model = 1), mod = "st hurdle one"),
                  tibble(res = residuals(sadMod_n3_st, model = 2), mod = "st hurdle two"))

ggplot(r_df, aes(sample = res)) +
  stat_qq(shape = 1) +
  stat_qq_line() +
  facet_wrap(~mod, ncol = 2) +
  labs(y = "Sample Quantiles", x = "Theoretical Quantiles")


# qqnorm(residuals(sadMod_n2, "mle-mcmc", mcmc_samples = res_sadMod_n2, model = 1))
# qqline(residuals(sadMod_n2, "mle-mcmc", mcmc_samples = res_sadMod_n2, model = 1))
# 
# qqnorm(residuals(sadMod_n2, "mle-mcmc", mcmc_samples = res_sadMod_n2, model = 2))
# qqline(residuals(sadMod_n2, "mle-mcmc", mcmc_samples = res_sadMod_n2, model = 2))
```


## Sprat fr

```{r fit saduria mods}
# fitting without spatial and spatiotemporal effects takes 15 sec, spatial model 20. AR1 spatiotemporal model 4 hours.

# missing years
my <- min(df_prs$year):max(df_prs$year)
missing_years <- my[!my %in% unique(df_prs$year)]

# mesh
mesh_prs <- make_mesh(df_prs, c("X", "Y"), cutoff = 6)

# reduce number of years to reduce fitting time
# df_prs_sel <- df_prs |> filter( year %in% c(1993:2020))
# mesh_prs <- make_mesh(df_prs_sel, c("X", "Y"), cutoff = 6)
# my <- min(df_prs_sel$year):max(df_prs_sel$year)
# missing_years <- my[!my %in% unique(df_prs_sel$year)]

#gc()
#.rs.restartR()

#plan(multisession, workers = 2)

# time varying screws up th qqfit. 

# sprMod_n1 <- # same as tot, tweedie
#   sdmTMB(
#     data = df_prs,
#     formula = fr_sprat ~ 0 + s(doy_sc, bs = "cc") + depth_sc, 
#     time_varying = ~ 1 + pred_length_sc,
#     extra_time = missing_years,
#     time = "year", 
#     mesh = mesh_prs,
#     spatial = "off",
#     spatiotemporal = "off",
#     family = tweedie(link = "log")
# )

sprMod_n2 <- # same as tot, delta_gamma poisson
  sdmTMB(
    data = df_prs,
    formula = fr_spr ~ 0 + s(doy_sc, bs = "cc") + depth_sc, 
    time_varying = ~ 1 + pred_length_sc,
    extra_time = missing_years,
    time = "year", 
    mesh = mesh_prs,
    spatial = "off",
    spatiotemporal = "off",
    family = delta_gamma(type = "poisson-link")
)

sprMod_n3 <- # deltagamma year_f*pred_length_sc
  sdmTMB(
    data = df_prs,
    formula = fr_spr ~ 0 + factor(year)*pred_length_sc + s(doy_sc, bs = "cc") + depth_sc, 
    mesh = mesh_prs,
    spatial = "off",
    spatiotemporal = "off",
    family = delta_gamma(type = "poisson-link")
)

sprMod_n4 <-  # deltagamma year_f*pred_length_sc
  sdmTMB(
    data = df_prs,
    formula = fr_spr ~ 0 + factor(year)*pred_length_sc + depth_sc, 
    mesh = mesh_prs,
    spatial = "off",
    spatiotemporal = "off",
    family = delta_gamma(type = "poisson-link")
)

#plan(sequential)

#sanity(sprMod_n1)
sanity(sprMod_n2)
sanity(sprMod_n3)
sanity(sprMod_n4)

#AIC(sprMod_n1)
AIC(sprMod_n2)
AIC(sprMod_n3)
AIC(sprMod_n4)
# AIC(Mod_s)
# AIC(Mod) # lowest AIC


r_df <- bind_rows(#tibble(res = residuals(sadMod_n1, model = 1), mod = "tweedie"),
                    tibble(res = residuals(sprMod_n2, model = 1), mod = "2one"),
                    tibble(res = residuals(sprMod_n2, model = 2), mod = "2two"),
                    tibble(res = residuals(sprMod_n3, model = 1), mod = "3one"),
                    tibble(res = residuals(sprMod_n3, model = 2), mod = "3two"),
                    tibble(res = residuals(sprMod_n4, model = 1), mod = "4one"),
                    tibble(res = residuals(sprMod_n4, model = 2), mod = "4two"))


ggplot(r_df, aes(sample = res)) +
  stat_qq(shape = 1) +
  stat_qq_line() +
  facet_wrap(~mod, ncol = 2) +
  labs(y = "Sample Quantiles", x = "Theoretical Quantiles")

res_sprMod_n3 <- residuals(sprMod_n3, type = "mle-mcmc", mcmc_samples =  sdmTMBextra::predict_mle_mcmc(sprMod_n3, mcmc_iter = 201, mcmc_warmup = 200))

qqnorm(residuals(sprMod_n3, "mle-mcmc", mcmc_samples = res_sprMod_n3, model = 1))
qqline(residuals(sprMod_n3, "mle-mcmc", mcmc_samples = res_sprMod_n3, model = 1))

qqnorm(residuals(sprMod_n3, "mle-mcmc", mcmc_samples = res_sprMod_n3, model = 2))
qqline(residuals(sprMod_n3, "mle-mcmc", mcmc_samples = res_sprMod_n3, model = 2))
```
For sprat, model 4 has possibly a slightly better qqplots, 3 has lower AIC and is the same formula as for the saduria model. Again, the mcmc residuals are way off. Using Tweedie makes r crash. I´ll stick to model 3 for sprat for now.



```{r plot coefficients for Mod}

# Coefficient estimate of year
Mod_n_tv_est <- as.list(Mod_n$sd_report, "Estimate")
Mod_n_tv_se <- as.list(Mod_n$sd_report, "Std. Error")

Mod_s_tv_est <- as.list(Mod_s$sd_report, "Estimate")
Mod_s_tv_se <- as.list(Mod_s$sd_report, "Std. Error")

Mod_tv_est <- as.list(Mod$sd_report, "Estimate")
Mod_tv_se <- as.list(Mod$sd_report, "Std. Error")

y_n_Mod <- data.frame(year = sort(unique(Mod_n$data$year)), coef.est = Mod_n_tv_est$b_rw_t[,1,], coef.se = Mod_n_tv_se$b_rw_t[,1,], model = "nos")
y_s_Mod <- data.frame(year = sort(unique(Mod_s$data$year)), coef.est = Mod_s_tv_est$b_rw_t[,1,], coef.se = Mod_s_tv_se$b_rw_t[,1,], model = "spatial")
y_Mod <- data.frame(year = sort(unique(Mod$data$year)), coef.est = Mod_tv_est$b_rw_t[,1,], coef.se = Mod_tv_se$b_rw_t[,1,], model = "spatiotemporal")

bind_rows(y_Mod, y_s_Mod, y_n_Mod) |>
  ggplot(aes(year, exp(coef.est), color = model, fill = model)) +
  geom_line() +
  geom_ribbon(aes(ymin = exp(coef.est-1.96*coef.se), ymax = exp(coef.est+1.96*coef.se)), colour = NA, alpha = 0.3) +
  scale_x_continuous(breaks = seq(min(df_tot$year), max(df_tot$year), by = 10)) +
  ylab("est for year") # the cf gets very large for the missing year

# Coefficient of length varying with year
ypl_Mod_n <- data.frame(year = sort(unique(Mod_n$data$year)), coef.est = Mod_n_tv_est$b_rw_t[,2,], coef.se = Mod_n_tv_se$b_rw_t[,2,], model = "nos")
ypl_Mod_s <- data.frame(year = sort(unique(Mod_s$data$year)), coef.est = Mod_s_tv_est$b_rw_t[,2,], coef.se = Mod_s_tv_se$b_rw_t[,2,], model = "spatial")
ypl_Mod <- data.frame(year = sort(unique(Mod$data$year)), coef.est = Mod_tv_est$b_rw_t[,2,], coef.se = Mod_tv_se$b_rw_t[,2,], model = "spatiotemporal")

bind_rows(ypl_Mod, ypl_Mod_s, ypl_Mod_n) |>
ggplot(aes(year, exp(coef.est), color = model)) +
  geom_line() +
  #geom_ribbon(aes(ymin = exp(coef.est-1.96*coef.se), ymax = exp(coef.est+1.96*coef.se)), alpha = 0.3) +
  scale_x_continuous(breaks = seq(min(df_tot$year), max(df_tot$year), by = 10)) +
  ylab("est for pred.length") 

```
```{r conditional fixed effects}
# Conditional effect of depth_sc

nd_dsc <- data.frame(year = 1993, depth_sc = seq(min(df_tot$depth_sc), max(df_tot$depth_sc), length.out = 50), pred_length_sc = 0, doy_sc = 0)

p_n_dsc <- predict(Mod_n, newdata = nd_dsc, re_form = NA, se_fit = TRUE)
p_s_dsc <- predict(Mod_s, newdata = nd_dsc, re_form = NA, se_fit = TRUE)
p_s_dsc <- predict(Mod, newdata = nd_dsc, re_form = NA, se_fit = TRUE)

p_n_dsc$model = "nos" 
p_s_dsc$model = "spatial"
p_st_dsc$model = "spatiotemporal"

bind_rows(p_n_dsc, p_s_dsc, p_st_dsc) |> 
  ggplot(aes(depth_sc, exp(est), color = model, fill = model)) +
  geom_line() +
  geom_ribbon(aes(ymin = exp(est-1.96*est_se), ymax = exp(est+1.96*est_se)),colour = NA, alpha = 0.3) +
  ylab("cond. effect depth_sc") 

# Conditional effect of s(doy_sc)
nd_doysc <- data.frame(year = 1993, depth_sc = 0, pred_length_sc = 0, doy_sc = seq(min(df_tot$doy_sc), max(df_tot$doy_sc), length.out = 50))

p_n_doysc <- predict(Mod_n, newdata = nd_doysc, re_form = NA, se_fit = TRUE)
p_s_doysc <- predict(Mod_s, newdata = nd_doysc, re_form = NA, se_fit = TRUE)
p_st_doysc <- predict(Mod, newdata = nd_doysc, re_form = NA, se_fit = TRUE)

p_s_doysc$doy_sc[which.max(exp(p_s_doysc$est))]

p_n_doysc$model = "nos" 
p_s_doysc$model = "spatial"
p_st_doysc$model = "spatiotemporal"

bind_rows(p_n_doysc, p_s_doysc) |> 
  ggplot(aes(doy_sc, exp(est), color = model, fill = model)) +
  geom_line() +
  geom_ribbon(aes(ymin = exp(est-1.96*est_se), ymax = exp(est+1.96*est_se)), colour = NA, alpha = 0.3) +
  ylab("cond. effect doy_sc") 

```


```{r predictions year}

nd_year <- data.frame(year = 1963:2022, depth_sc = 0, pred_length_sc = 0, doy_sc = 0)

p_n_year <- predict(Mod_n, newdata = nd_year, re_form = NA, se_fit = TRUE)
p_s_year <- predict(Mod_s, newdata = nd_year, re_form = NA, se_fit = TRUE)
p_st_year <- predict(Mod, newdata = nd_year, re_form = NA, se_fit = TRUE)

p_n_year$model = "nos" 
p_s_year$model = "spatial"
p_st_doysc$model = "spatiotemporal"

bind_rows(p_n_year, p_s_year) |> 
  ggplot(aes(year, exp(est), color = model, fill = model)) +
  geom_line() +
  geom_ribbon(aes(ymin = exp(est-1.96*est_se), ymax = exp(est+1.96*est_se)), colour = NA, alpha = 0.3) +
  scale_x_continuous(breaks = seq(min(df_tot$year), max(df_tot$year), by = 10)) +
  ylab("cond. effect of year") 


```
```{r index}
nd_pred_grid <- pred_grid |>
  mutate(depth_sc = (depth - mean(depth))/sd(depth),
         doy_sc = p_s_doysc$doy_sc[which.max(exp(p_s_doysc$est))],
         pred_length_sc = 0)

ncells <- filter(nd_pred_grid, year == max(nd_pred_grid$year)) |> nrow()

pred_Mod_n <- predict(Mod_n, newdata = nd_pred_grid, return_tmb_object = TRUE)
pred_Mod_s <- predict(Mod_s, newdata = nd_pred_grid, return_tmb_object = TRUE)

index_n <- get_index(pred_Mod_n, area = 1/ncells, bias_correct = TRUE)
index_s <- get_index(pred_Mod_s, area = 1/ncells, bias_correct = TRUE)

index_n$model = "nos" 
index_s$model = "spatial"

bind_rows(index_n, index_s)  |>
  ggplot(aes(year, est, color = model, fill = model)) +
  geom_line() +
  geom_ribbon(aes(ymin = lwr, ymax = upr), colour = NA, alpha = 0.3) +
  scale_x_continuous(breaks = seq(min(df_tot$year), max(df_tot$year), by = 10)) +
  ylab("index mean") 

```



```{r predictions year Mod}
# nd_pred_grid <- pred_grid |>
#   filter(year > 2020 ) |>
#   #filter(year %in% c(2015:2018) ) |>
#   mutate(depth_sc = (depth - mean(depth))/sd(depth),
#          doy_sc = 0,
#          pred_length_sc = 0)
# 
# ncells <- filter(nd_pred_grid, year == max(nd_pred_grid$year)) |> nrow()
# 
# time <- proc.time()
# #plan(multisession, workers = 2)
# ind <- nd_pred_grid |>
#   split(nd_pred_grid$year) |>
#   map(\(nd) predict(Mod_n, newdata = nd, return_tmb_object = TRUE)) |>
#   map(\(pr) get_index(pr, area = 1/ncells, bias_correct = TRUE)) |>
#   list_rbind()
# #plan(sequential)
# proc.time() - time

# This works, roughly 1 hour per year. But I dont need map really since im just doing one year at a time.
time <- proc.time()
ps = data.frame()
for (i in 1990:2022) {

  nd_pred_grid <- pred_grid |>
  filter( year %in% i ) |>
  mutate(depth_sc = (depth - mean(depth))/sd(depth),
         doy_sc = 0,
         pred_length_sc = 0)

  prdi <- nd_pred_grid |>
      split(nd_pred_grid$year) |>
      map(\(nd) predict(Mod, newdata = nd, return_tmb_object = TRUE))

  irdi <- prdi |>
      map(\(x) get_index(x, area = 1/ncells, bias_correct = TRUE)) |>
    #future_map(\(pr) get_index(pr, area = 1/ncells, bias_correct = TRUE)) |>
      list_rbind()#lmap(get_index, area = 1/ncells, bias_correct = TRUE)
# for two consequitive years, the predictions take 180 sec and the index 5500 sec.

ps <- bind_rows(ps,irdi) # ad

# for (i in 1:n) {
#     # ... make some data
#     dat <- data.frame(x = rnorm(10), y = runif(10))
#     dat$i <- i  # maybe you want to keep track of which iteration produced it?
#     datalist[[i]] <- dat # ad
  gc()
}

proc.time() - time


time <- proc.time()
ps = data.frame()
for (i in 1963:2022) {

  nd_pred_grid <- pred_grid |>
  filter( year %in% i ) |>
  mutate(depth_sc = (depth - mean(depth))/sd(depth),
         doy_sc = 0,
         pred_length_sc = 0)

  prdi <- predict(Mod_n, newdata = nd_pred_grid, return_tmb_object = TRUE)
  irdi <- get_index(prdi, area = 1/ncells, bias_correct = TRUE)
  ps <- bind_rows(ps,irdi) 
  gc()
}

proc.time() - time

# # model n
# time <- Sys.time()
# index_n <- map_dfr(unique(nd_pred_grid$year), \(y) { # backslash means function
#   nd <- nd_pred_grid |> filter( year == y )
#   p <- predict(Mod_n, newdata = nd, return_tmb_object = TRUE)
#   get_index(p, area = 1/ncells, bias_correct = TRUE)
# })
# Sys.time() - time
# 
# time <- Sys.time()
# plan(multisession, workers = 4)
# index_n <- future_map_dfr(unique(nd_pred_grid$year), \(y) { # backslash means function
#   nd <- nd_pred_grid |> filter( year == y )
#   p <- predict(Mod_n, newdata = nd, return_tmb_object = TRUE)
#   get_index(p, area = 1/ncells, bias_correct = TRUE)
# })
# plan(sequential)
# Sys.time() - time
# # 
# 
# ncells <- filter(nd_pred_grid, year == max(nd_pred_grid$year)) |> nrow()
# 
# 
# pred_Mod <- predict(Mod_n, newdata = nd_pred_grid, return_tmb_object = TRUE) # TRUE returns a report from TMB in the 
# index <- get_index(Pred_Mod, area = rep(1/ncells, nrow(Pred_Mod$data)), bias_correct = TRUE)
# 
ps |>
  ggplot(aes(year, est), fill = model) +
  geom_line() +
  geom_point(shape = 21, alpha = 0.7) +
  geom_ribbon(aes(ymin = lwr, ymax = upr), colour = NA, alpha = 0.4)
```


```{r predictions year}
# time <- Sys.time() #crash/error?
# index_tot <- get_index(pred_Mod, area = rep(1/ncells, nrow(pred_Mod$data)), bias_correct = TRUE)
# Sys.time() - time

# saveRDS(index_tot, file = paste0("index_fr-tot_Mod_ar1",Sys.Date(),".rds"))

# time <- Sys.time()
# index_tot_s <- get_index_sims(pred_Mod_s, area = rep(1/ncells, nrow(pred_Mod_s)))
# Sys.time() - time
# 
# Mod_res <- sdmTMBextra::predict_mle_mcmc(Mod, mcmc_warmup = 200, mcmc_iter = 201)
# qqnorm(residuals(Mod, "mle-mcmc", mcmc_samples = Mod_res))
# qqline(residuals(Mod, "mle-mcmc", mcmc_samples = Mod_res))

```


Predictions based on spatial model #(spatiotemporal predictions makes R crash or takes too mcuh time)

```{r predictions pred length Mod}

# # Predict on grid, for indices and maps
# nd_sm_pred_grid <- pred_grid |>
#   mutate(depth_sc = (depth - mean(depth))/sd(depth),
#          doy_sc = 0,
#          pred_length_sc = (15 - mean(df$pred_length))/sd(df$pred_length))
# nd_la_pred_grid <- pred_grid |>
#   mutate(depth_sc = (depth - mean(depth))/sd(depth),
#          doy_sc = 0,
#          pred_length_sc = (55 - mean(df$pred_length))/sd(df$pred_length))
# 
# pred_Mod_m <- predict(Mod_s, newdata = nd_pred_grid, return_tmb_object = TRUE)
# pred_Mod_sm <- predict(Mod_s, newdata = nd_sm_pred_grid, return_tmb_object = TRUE)
# pred_Mod_la <- predict(Mod_s, newdata = nd_la_pred_grid, return_tmb_object = TRUE)
# 
# # Make temporal index!
# ncells <- filter(nd_pred_grid, year == max(nd_pred_grid$year)) |> nrow()
# #??sdmTMB:predict
# 
# index_tot_sm <- get_index(pred_Mod_sm, area = rep(1/ncells, nrow(pred_Mod_sm$data)), bias_correct = TRUE)
# index_tot_la <- get_index(pred_Mod_la, area = rep(1/ncells, nrow(pred_Mod_la$data)), bias_correct = TRUE)
# index_tot_m <- get_index(pred_Mod_m, area = rep(1/ncells, nrow(pred_Mod_m$data)), bias_correct = TRUE)
# 
# bind_rows(index_tot_sm |> mutate(length = "15"),
#           index_tot_m |> mutate(length = "36, mean"),
#           index_tot_la |> mutate(length = "55"))  |> 
#   ggplot(aes(year, est, color = length)) +
#   geom_line() +
#   #geom_ribbon(aes(ymin = lwr, ymax = upr, alpha = 0.3)) +
#   #scale_fill_manual(values = c("white", "grey10")) +
#   scale_x_continuous(breaks = seq(min(index_tot_sm$year), max(index_tot_sm$year), by = 10)) + 
#   ggtitle("predicted est (not simulated)")
#   #facet_wrap(~method, scales = "fixed") + 
#   geom_errorbar(aes(ymin = lwr, ymax = upr), alpha = 0.4, width = 0) 

```


```{r}
# plot_map_fc +
#   #geom_point(data = pred_Mod$data, aes(X*1000, Y*1000, color = exp(est)), alpha = 0.5) +
#   geom_point(data = pred_Mod$data |> filter(year %in% seq(1965, 2022, by = 3)), aes(X*1000, Y*1000, color = exp(est)), alpha = 0.5) +
#   #geom_point(data = pred_Mod$data |> filter(year == 1990), aes(X*1000, Y*1000, color = exp(est)), alpha = 0.5) +
#   facet_wrap(~year) +
#   theme_sleek(base_size = 6) + 
#   geom_sf() +
#   ggtitle("all effects")
# 
# plot_map_fc +
#   geom_point(data = pred_Mod$data |> filter(year %in% seq(1965, 2022, by = 3)), aes(X*1000, Y*1000, color = exp(est_non_rf)), alpha = 0.5) +
#   #geom_point(data = pred_Mod$data |> filter(year == 1990), aes(X*1000, Y*1000, color = exp(est)), alpha = 0.5) +
#   facet_wrap(~year) +
#   theme_sleek(base_size = 6) + 
#   geom_sf() + 
#   ggtitle("fixed effects")
# 
# plot_map_fc +
#   geom_point(data = pred_Mod$data |> filter(year %in% seq(1965, 2022, by = 3)), aes(X*1000, Y*1000, color = est_rf), alpha = 0.5) +
#   #geom_point(data = pred_Mod$data |> filter(year == 1990), aes(X*1000, Y*1000, color = exp(est)), alpha = 0.5) +
#   facet_wrap(~year) +
#   theme_sleek(base_size = 6) + 
#   geom_sf() +
#   ggtitle("random effects")
# 
# plot_map_fc +
#   geom_point(data = pred_Mod$data |> filter(year == 1993), aes(X*1000, Y*1000, color = omega_s), alpha = 0.5) +
#   #geom_point(data = pred_Mod$data |> filter(year == 1990), aes(X*1000, Y*1000, color = exp(est)), alpha = 0.5) +
#   facet_wrap(~year) +
#   theme_sleek(base_size = 6) + 
#   geom_sf() +
#   ggtitle("spatial random effects")
# 
# plot_map_fc +
#   geom_point(data = pred_Mod$data |> filter( year %in% seq(1965, 2022, by = 3)), aes(X*1000, Y*1000, color = epsilon_st), alpha = 0.5) +
#   #geom_point(data = pred_Mod$data |> filter(year == 1990), aes(X*1000, Y*1000, color = exp(est)), alpha = 0.5) +
#   facet_wrap(~year) +
#   theme_sleek(base_size = 6) + 
#   geom_sf() +
#   ggtitle("spatialtemporal random effects")

```
<!-- ```{r plot prediction} -->
<!-- # Plot all together -->
<!-- index_comp_sim <- bind_rows(#index_avg_sim_re %>% mutate(Prediction = "Random & Fixed effects (no yr)"), -->
<!--                             index_avg_sim_fe %>% mutate(Prediction = "Fixed effects (no yr)"), -->
<!--                             index_avg_sim %>% mutate(Prediction = "Full")) -->

<!-- index_comp_sims <- bind_rows(#index_avg_sims_re %>% mutate(Prediction = "Random & Fixed effects (no yr)"), -->
<!--                              index_avg_sims_fe %>% mutate(Prediction = "Fixed effects (no yr)"), -->
<!--                              index_avg_sims %>% mutate(Prediction = "Full")) %>% -->
<!--   filter(.iteration < 26) -->

<!-- ggplot(index_comp_sim, aes(year, est, ymin = lwr, ymax = upr, color = Prediction, fill = Prediction)) + -->
<!--   geom_ribbon(alpha = 0.2, color = NA) + -->
<!--   geom_line(size = 1) +  -->
<!--   geom_line(data = filter(index_comp_sims, .iteration < 26), -->
<!--             aes(year, est, group = interaction(.iteration, Prediction), color = Prediction), inherit.aes = FALSE, alpha = 0.3) + -->
<!--   NULL -->
<!-- ``` -->
<!-- ``` -->

<!-- ```{r predictions} -->
<!-- # Conditional effect of year -->
<!-- nd_Y <- data.frame(year = seq(1963: max(df_noz_doy_sel$year), by ), depth_sc = 0, pred_length_sc = 0, doy_sc = 0) -->

<!-- p_M1_year <- predict(M1, newdata = nd_year, re_form = NA, se_fit = TRUE) -->
<!-- p_M2_year <- predict(M2, newdata = nd_year, re_form = NA, se_fit = TRUE) -->

<!-- p_M1_year$model = "M1" -->
<!-- p_M2_year$model = "M2" -->

<!-- ``` -->









<!-- ## Model alterantives to M1 and M2 -->

<!-- ```{r Model} -->

<!-- M3a1 <- # factor year * pred_length, skip time varying and missing years -->
<!--   sdmTMB( -->
<!--   data = df_noz_doy_sel, -->
<!--   formula = fr_tot ~ 0 + factor(year) * pred_length_sc + s(doy_sc, bs = "cc") + depth_sc,  -->
<!--   #time_varying = ~ 1 + pred_length_sc,  -->
<!--   #extra_time = missing_years,  -->
<!--   #time = "year",  -->
<!--   mesh = mesh_nozdoy_sel, -->
<!--   spatial = "off", -->
<!--   family = Gamma(link = "log"), -->
<!-- ) -->

<!-- M3a2 <- # pred_length * factor year, skip time varying and missing years -->
<!--   sdmTMB( -->
<!--   data = df_noz_doy_sel, -->
<!--   formula = fr_tot ~ 0 + pred_length_sc * factor(year) + s(doy_sc, bs = "cc") + depth_sc,  -->
<!--   #time_varying = ~ 1 + pred_length_sc,  -->
<!--   #extra_time = missing_years,  -->
<!--   #time = "year",  -->
<!--   mesh = mesh_nozdoy_sel, -->
<!--   spatial = "off", -->
<!--   family = Gamma(link = "log"), -->
<!-- ) -->

<!-- M3b <-  # smooth on length (k = 3) by year. Warning: NA/NaN function evaluationWarning: NA/NaN function evaluationWarning: The model may not have converged: non-positive-definite Hessian matrix. -->
<!--   sdmTMB( -->
<!--   data = df_noz_doy_sel, -->
<!--   formula = fr_tot ~ 0 + factor(year) + s(doy_sc, bs = "cc") + depth_sc + s(pred_length_sc, k = 3, by = year),  -->
<!--   #time_varying = ~ 1, -->
<!--   #extra_time = missing_years,  -->
<!--   #time = "year",  -->
<!--   mesh = mesh_nozdoy_sel, -->
<!--   spatial = "off", -->
<!--   family = Gamma(link = "log"), -->
<!-- ) -->

<!-- M3c <-  # mean as random factor instead of fixed -->
<!--   sdmTMB( -->
<!--   data = df_noz_doy_sel, -->
<!--   formula = fr_tot ~ 0 + s(doy_sc, bs = "cc") + depth_sc + (0|year_f),  -->
<!--   time_varying = ~ 0 + pred_length_sc, -->
<!--   extra_time = missing_years,  -->
<!--   time = "year",  -->
<!--   mesh = mesh_nozdoy_sel, -->
<!--   spatial = "off", # It still fits a spatial model -->
<!--   family = Gamma(link = "log"), -->
<!-- ) -->

<!-- # The interaction with a smooth effect seemingly does'nt work. This prevents the model from finding year. -->
<!-- # M3d <- # factor year * s(pred_length, k = 4).  -->
<!-- #   sdmTMB( -->
<!-- #   data = df_noz_doy_sel_M2, -->
<!-- #   formula = fr_tot ~ factor(year) * s(pred_length_sc, k = 4) + s(doy_sc, bs = "cc") + depth_sc,  -->
<!-- #   #time_varying = ~ 1 + pred_length_sc,  -->
<!-- #   #extra_time = missing_years,  -->
<!-- #   #time = "year",  -->
<!-- #   mesh = mesh_nozdoy_sel_M2, -->
<!-- #   spatial = "on", -->
<!-- #   family = Gamma(link = "log"), -->
<!-- # ) -->

<!-- sanity(M3a1)  -->
<!-- sanity(M3b)  -->
<!-- sanity(M3c) -->

<!-- qqnorm(residuals(M3a1)) -->
<!-- qqline(residuals(M3a1)) -->
<!-- qqnorm(residuals(M3c)) -->
<!-- qqline(residuals(M3c)) -->

<!-- # Only a and c left for comparison -->
<!-- M3a1 -->
<!-- M3b # Warning: Smoother fixed effect matrix names could not be retrieved. Thi smakes the smoother effect  -->
<!-- M3c -->

<!-- ``` -->



<!-- ```{r plot M3 models} -->

<!-- # estimates for year effects -->
<!-- M3a1_est <- tidy(M3a1, effects = "fixed", conf.int = TRUE)$estimate -->
<!-- M3a1_se <- tidy(M3a1, effects = "fixed", conf.int = TRUE)$std.error -->

<!-- y_M3a <- data.frame(year = sort(unique(M3a1$data$year)), coef.est = M3a1_est[1:39], coef.se = M3a1_se[1:39], model = "M3a") -->
<!-- y_M3c <- data.frame(year = sort(unique(df_noz_doy_sel$year)), coef.est = tidy(M3c, effects = "ran_vals", conf.int = TRUE)$estimate, coef.se = tidy(M3c, effects = "ran_vals", conf.int = TRUE)$std.error, model = "M3c") -->

<!-- y_M3a$model = "M3a" -->
<!-- y_M3c$model = "M3c" -->
<!-- y_M3 <- bind_rows(y_M3a,y_M3c) -->

<!-- # Conditional effect of year. Cant predict over year when it is a random effect somehow -->
<!-- # nd_M3a_year <- data.frame(year = sort(unique(M3a$data$year)), depth_sc = 0, pred_length_sc = 0, doy_sc = 0) -->
<!-- # nd_M3c_year <- data.frame(year = sort(unique(M3c$data$year)), depth_sc = 0, pred_length_sc = 0, doy_sc = 0) -->
<!-- # p_M3a_year <- predict(M3a, newdata = nd_M3a_year, re_form = NA, se_fit = TRUE) -->
<!-- # p_M3c_year <- predict(M3c, newdata = nd_M3c_year, re_form = NA, se_fit = TRUE) # cant predict over year... -->

<!-- # Predator length effects varying with year -->
<!-- # M3a -->
<!-- ypl_M3a1 <- data.frame(year = sort(unique(M3a1$data$year)), coef.est = c(M3a1_est[1] + M3a1_est[40], M3a1_est[1] + M3a1_est[40] + M3a1_est[42:79]), coef.se = c(M3a1_se[1], M3a1_se[42:79]), model = "M3a1") -->

<!-- M3a2_est <- tidy(M3a2, effects = "fixed", conf.int = TRUE)$estimate -->
<!-- ypl_M3a2 <- data.frame(year = sort(unique(M3a2$data$year)), coef.est = c(M3a2_est[1] + M3a2_est[2], M3a2_est[1] + M3a2_est[2] + M3a2_est[42:79]), model = "M3a2") -->

<!-- ypl_comp_M3a <- bind_rows(ypl_M3a1[,c(1,2,4)], ypl_M3a2) -->

<!-- # M3c  -->
<!-- pl_M3c <- as.list(M3c$sd_report, "Estimate") -->
<!-- pls_M3c <- as.list(M3c$sd_report, "Std. Error") -->
<!-- M3c_est <- tidy(M3c, effects = "ran_vals", conf.int = TRUE)$estimate # random year effect  -->
<!-- M3c_se <- tidy(M3c, effects = "ran_vals", conf.int = TRUE)$std.error -->

<!-- ypl_M3c <- data.frame(year = seq(min(df_noz_doy_sel$year), max(df_noz_doy_sel$year)), coef.est = M3c_est[1] + pl_M3c$b_rw_t, coef.se = pls_M3c$b_rw_t, model = "M3c") -->

<!-- # plot comparison of M3a1 and 2 of the effect of pred length varying with year -->
<!-- ypl_comp_M3a |> -->
<!--   ggplot(aes(year, exp(coef.est), color = model, linetype = model)) + -->
<!--   geom_line() + -->
<!--   ggtitle(" order of interactive terms (a*b vs b*a) makes no difference") -->

<!-- # plot year coef for a and c -->
<!-- y_M3 |> -->
<!--   ggplot(aes(year, exp(coef.est), color = model)) + -->
<!--   geom_line() + -->
<!--   geom_ribbon(aes(ymin = exp(coef.est-1.96*coef.se), ymax = exp(coef.est+1.96*coef.se)), alpha = 0.3) + -->
<!--   scale_x_continuous(breaks = seq(min(df_noz_doy_sel$year), max(df_noz_doy_sel$year), by = 20)) + -->
<!--   ylab("random estimate of year") -->

<!-- # compare M3a and c of the effect if pred length varying with year -->
<!-- bind_rows(ypl_M3c, ypl_M3a1) |> -->
<!--   ggplot(aes(year, exp(coef.est), color = model)) + -->
<!--   geom_line() + -->
<!--   geom_ribbon(aes(ymin = exp(coef.est-1.96*coef.se), ymax = exp(coef.est+1.96*coef.se)), alpha = 0.3) + -->
<!--   scale_x_continuous(breaks = seq(min(df_noz_doy_sel$year), max(df_noz_doy_sel$year), by = 10)) + -->
<!--   ylab("est for pred.length")  -->

<!-- ``` -->

<!-- In the plots above, M3a has the intercept for the first year (1982) and the fixed effect of pred_length_sc added to the interaction effect of year and pred_length_sc. M3c has the random effect of year added to the effect of predator length varying with year but no overall effect of predator length. This is a bit odd as the predator length effect is large (est 0.4) in M3a. What am I missing.. -->

<!-- ```{r} -->
<!-- # Compare M3 with M1 and 2 -->

<!-- bind_rows(ypl_M3a1,ypl_M3c) |> -->
<!-- bind_rows(ypl_M12) |> -->
<!--   ggplot(aes(year, exp(coef.est), color = model, linetype = model)) + -->
<!--   geom_line() + -->
<!--   scale_x_continuous(breaks = seq(min(df_noz_doy_sel$year), max(df_noz_doy_sel$year), by = 10)) + -->
<!--   ylab("est for pred.length") -->
<!-- ``` -->

<!-- The intercepts may be different... -->

<!-- ```{r} -->

<!-- # M1 -->
<!-- # formula = fr_tot ~ 0 + as.factor(year) + s(doy_sc, bs = "cc") + depth_sc,  -->
<!-- #   time_varying = ~ 0 + pred_length_sc, # implies time varying random walk intercept  -->
<!-- # M2 -->
<!-- # formula = fr_tot ~ 0 + s(doy_sc, bs = "cc") + depth_sc,  -->
<!-- #   time_varying = ~ 1 + pred_length_sc, -->
<!-- # M3a  -->
<!-- # formula = fr_tot ~ 0 + factor(year) * pred_length_sc + s(doy_sc, bs = "cc") + depth_sc,  -->
<!-- # M3c -->
<!-- # formula = fr_tot ~ 0 + s(doy_sc, bs = "cc") + depth_sc + (0|year_f),  -->
<!-- #   time_varying = ~ 0 + pred_length_sc, -->

<!-- # I remove the year intercepts, i.e. 1982 for M3a (but keep the predator length effect) and the random year effect for M3c.. -->
<!-- # ypl_M3a1 <- data.frame(year = sort(unique(M3a1$data$year)), coef.est = c(M3a1_est[1] + M3a1_est[40], M3a1_est[1] + M3a1_est[40] + M3a1_est[42:79]), coef.se = c(M3a1_se[1], M3a1_se[42:79]), model = "M3a1") -->
<!-- ypl_M3aa   <- data.frame(year = sort(unique(M3a1$data$year)), coef.est = c(M3a1_est[40], M3a1_est[40] + M3a1_est[42:79]), coef.se = c(M3a1_se[1], M3a1_se[42:79]), model = "M3a1") -->

<!-- # ypl_M3c <- data.frame(year = seq(min(df_noz_doy_sel$year), max(df_noz_doy_sel$year)), coef.est = M3c_est[1] + pl_M3c$b_rw_t, coef.se = pls_M3c$b_rw_t, model = "M3c") -->
<!-- ypl_M3cc <- data.frame(year = seq(min(df_noz_doy_sel$year), max(df_noz_doy_sel$year)), coef.est = pl_M3c$b_rw_t, coef.se = pls_M3c$b_rw_t, model = "M3c") -->

<!-- bind_rows(ypl_M3aa,ypl_M3cc) |> -->
<!-- bind_rows(ypl_M12) |> -->
<!--   ggplot(aes(year, exp(coef.est), color = model, linetype = model)) + -->
<!--   geom_line() + -->
<!--   scale_x_continuous(breaks = seq(min(df_noz_doy_sel$year), max(df_noz_doy_sel$year), by = 10)) + -->
<!--   ylab("est for pred.length")  -->

<!-- ``` -->
<!-- By removing the year intercepts, i.e. 1982 for M3a and the random year effect for M3c, we get the coeffcients for the effects of predator length varying with year on the same scale as M1 and M2.  -->

<!-- ## Summary -->

<!--  * M3a - Specifying pred_length_sc$*$factor(year) or factor(year)$*$pred_length_sc doesn't matter. A fixed effect interactiopn makes for somewhat different coefficient estimates for predator length over year compared to having this effect in time_varying.  -->
<!--  * M3b - The effect of a smoother on predator length varying with year (i.e. by = year) cannot be estimated by the model( " Smoother fixed effect matrix names could not be retrieved"). The smoother term can't be put on time_varying (the function doesn't recognize the s() function). There are more issue with the model (see above) and we need to look into this if we want to do this model.I've dropped this option.  -->
<!--  * M3c - year as a randoom effect instead of a time_varying intercept makes small differences.   -->
<!--  * M3d - An interaction between year and a smooth effect on pred_length_sc seemingly doesn't work. This prevents sdmTMB from finding year. Therefore I've dropped this option. -->

<!-- Independent of model structure, the models mantain the same estimate for the predator length effects varying over year. The year effect may differ however  -->

<!-- *I also NOTEd that, if time_varying is on but spatial is off, it fits a spatial model and asks for xy coordinates when I use predict()*. -->


<!-- ## Appendix 1. Variation and time_varying intercepts vs fixed factor year -->
<!-- ```{r} -->
<!-- # Pred length i fixed effect. test på 10 år. Om m2 smoothen är, t_v contra fator år har lite skilllnad men här har vi. Intercpetrn er . testa genom längs om en fixe deefkt om tv fixed ekfkket kan fånaga annual fluctuatio -->

<!-- # M1 varies but not M2 -->
<!-- Mtesta <-  -->
<!--   sdmTMB( -->
<!--   data = df_noz_doy_sel |> filter(year_f %in% 2012:2022), -->
<!--   formula = fr_tot ~ 0 + s(doy_sc, bs = "cc") + depth_sc,  -->
<!--   time_varying = ~ 1 + pred_length_sc, -->
<!--   time = "year", # for spatiotemporal and time_varying -->
<!--   #mesh = mesh_nozdoy_sel, -->
<!--   spatiotemporal = "off", -->
<!--   spatial = "off", -->
<!--   family = Gamma(link = "log"), -->
<!-- ) -->

<!-- Mtestb <-  -->
<!--   sdmTMB( -->
<!--   data = df_noz_doy_sel |> filter(year_f %in% 2012:2022), -->
<!--   formula = fr_tot ~ 0 + year_f + s(doy_sc, bs = "cc") + depth_sc,  -->
<!--   time_varying = ~ 0 + pred_length_sc, -->
<!--   #extra_time = missing_years, # to fill in empty years -->
<!--   time = "year", # for spatiotemporal and time_varying -->
<!--   #mesh = mesh_nozdoy_sel, -->
<!--   spatial = "off", -->
<!--   spatiotemporal = "off", -->
<!--   family = Gamma(link = "log"), -->
<!-- ) -->

<!-- Mtestc <-  -->
<!--   sdmTMB( -->
<!--   data = df_noz_doy_sel |> filter(year_f %in% 2012:2022), -->
<!--   formula = fr_tot ~ 0 + pred_length_sc + s(doy_sc, bs = "cc") + depth_sc,  -->
<!--   time_varying = ~ 1, -->
<!--   #extra_time = missing_years, # to fill in empty years -->
<!--   time = "year", # for spatiotemporal and time_varying -->
<!--   #mesh = mesh_nozdoy_sel, -->
<!--   spatial = "off", -->
<!--   spatiotemporal = "off", -->
<!--   family = Gamma(link = "log"), -->
<!-- ) -->
<!-- Mtestd <-  -->
<!--   sdmTMB( -->
<!--   data = df_noz_doy_sel |> filter(year_f %in% 2012:2022), -->
<!--   formula = fr_tot ~ 0 + year_f + pred_length_sc + s(doy_sc, bs = "cc") + depth_sc,  -->
<!--   time_varying = ~ 0, -->
<!--   time = "year", # for spatiotemporal and time_varying -->
<!--   #mesh = mesh_nozdoy_sel, -->
<!--   spatiotemporal = "off", -->
<!--   spatial = "off", -->
<!--   family = Gamma(link = "log"), -->
<!-- ) -->

<!-- nd_year <- data.frame(year = Mtesta$data$year, depth_sc = 0, pred_length_sc = 0, doy_sc = 0) -->
<!-- p_Mtesta_year <- predict(Mtesta, newdata = nd_year, re_form = NA, se_fit = TRUE) -->

<!-- nd_year <- data.frame(year = Mtestb$data$year, year_f = Mtestb$data$year_f, depth_sc = 0, pred_length_sc = 0, doy_sc = 0) -->
<!-- p_Mtestb_year <- predict(Mtestb, newdata = nd_year, re_form = NA, se_fit = TRUE) -->

<!-- nd_year <- data.frame(year = Mtestc$data$year, depth_sc = 0, pred_length_sc = 0, doy_sc = 0) -->
<!-- p_Mtestc_year <- predict(Mtestc, newdata = nd_year, re_form = NA, se_fit = TRUE) -->

<!-- nd_year <- data.frame(year = Mtestd$data$year, year_f = Mtestd$data$year_f, depth_sc = 0, pred_length_sc = 0, doy_sc = 0) -->
<!-- p_Mtestd_year <- predict(Mtestd, newdata = nd_year, re_form = NA, se_fit = TRUE) -->

<!-- p_Mtesta_year$model = "a" -->
<!-- p_Mtestb_year$model = "b" -->
<!-- p_Mtestc_year$model = "c" -->
<!-- p_Mtestd_year$model = "d" -->

<!-- p_year <- bind_rows(p_Mtesta_year, p_Mtestb_year,p_Mtestc_year, p_Mtestd_year) -->

<!-- p_year |> -->
<!--   ggplot(aes(year, exp(est), color = model)) + -->
<!--   geom_line() + -->
<!--   geom_ribbon(aes(ymin = exp(est-1.96*est_se), ymax = exp(est+1.96*est_se)), alpha = 0.1) + -->
<!--   scale_x_continuous(breaks = seq(min(df_noz_doy_sel$year), max(df_noz_doy_sel$year), by = 10)) + -->
<!--   ylab("prediction for year") -->
<!-- ``` -->

<!-- ## Appendix 2. Model with a smoother on length -->

<!-- This causes issues that I so far havent figured out how to solve -->

<!-- ```{r} -->
<!-- M0 <- -->
<!--   sdmTMB( -->
<!--   data = df_noz_doy_sel |> filter(year > 2012), -->
<!--   formula = fr_tot ~ 0 + year_f + s(pred_length_sc, m = 2, by = year_f) + depth_sc,  -->
<!--   spatiotemporal = "off", -->
<!--   spatial = "off", -->
<!--   family = Gamma(link = "log"), -->
<!-- ) -->

<!-- sanity(M0) -->
<!-- M0 -->

<!-- nd_length <- expand.grid( -->
<!--   pred_length_sc = seq(min(df_noz_doy_sel$pred_length_sc), max(df_noz_doy_sel$pred_length_sc), length.out = 50), -->
<!--   year_f = factor(2013:2022)) -->
<!-- nd_length$depth_sc <- 0 -->
<!-- nd_length$doy_sc <- 0 -->

<!-- p_M0_length <- predict(M0, newdata = nd_length, se_fit = TRUE, re_form = NA) -->

<!-- p_M0_length |> -->
<!--   ggplot(aes(pred_length_sc, exp(est), color = year_f)) + -->
<!--   geom_line() #+ -->
<!--   geom_ribbon(aes(fill = year), alpha = 0.1) -->
<!-- ``` -->
