---
title: "Feeding ratio. Observation error families and fr cutoffs"
author: "Viktor Thunell"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format: 
  html:
    page-layout: full
    embed-resources: true
knitr: 
  opts_chunk:
    fig.align: center
    out-width: 80%
editor: source
execute: 
  echo: true
  eval: true
  cache: false
---

## Load libraries

```{r libs}
#| message: false
#| warning: false
#| cache: false

# Load libraries, install if needed
pkgs <- c("tidyverse", "tidylog", "devtools", "sdmTMB", "sdmTMBextra", "terra", "mapplots",
          "viridis", "visreg", "modelr", "future", "kableExtra", "ggh4x", "patchwork") 

if(length(setdiff(pkgs,rownames(installed.packages()))) > 0){

    install.packages(setdiff(pkgs, rownames(installed.packages())), dependencies = T)
  
  }

invisible(lapply(pkgs, library, character.only = T))

# Import some plotting functions
# Source code for map plots
# You need:
# devtools::install_github("seananderson/ggsidekick") # not on CRAN; library(ggsidekick)
 devtools::source_url("https://raw.githubusercontent.com/maxlindmark/pred-prey-overlap/main/R/functions/map-plot.R")
options(ggplot2.continuous.colour = "viridis")
#remotes::install_github("pbs-assess/sdmTMBextra", dependencies = TRUE)

library(ggsidekick)
theme_set(theme_sleek())

# Set path
home <- here::here()

```

Read data

```{r}
#| message: false
#| warning: false

df <- read_csv(paste0(home, "/data/clean/stomachs.csv")) |>
  mutate(depth_sc = (depth - mean(depth))/sd(depth),
         herring_sc = (herring - mean(herring))/sd(herring),
         saduria_sc = (saduria - mean(saduria))/sd(saduria),          
         sprat_sc = (sprat - mean(sprat))/sd(sprat),
         other_invert_sc = (other_invert - mean(other_invert))/sd(other_invert),
         other_sc = (other - mean(other))/sd(other),
         other_fish_sc = (other_fish - mean(other_fish))/sd(other_fish),
         benth_fish_sc = (benth_fish - mean(benth_fish))/sd(benth_fish),
         year_f = as.factor(year),
         month_f = as.factor(month),
         ices_rect = as.factor(ices_rect),
         pred_length_sc = (pred_length - mean(pred_length)) / sd(pred_length),
         doy_sc = ifelse(!is.na(day_of_year), (day_of_year - mean(day_of_year, na.rm = TRUE))/sd(day_of_year, na.rm = TRUE), NA)) |> 
  rowwise() |> 
  mutate(tot = sum(other, other_invert, benth_fish, other_fish, saduria, sprat, herring)
)

glimpse(df)

```

## Gamma and feeding ratio cutoff values...

Fit with gamma. Sometimes stomachs are very full in relation to predator weight. The fr_tot thus has a long tail and the the fitted vs predicted quantiles depends on choice of cutoff for fr.

```{r gamma 95 vs 99}
# remove empty stomachs for fr-tot model and shorten time series to redu e fiiting time
df_fr <- df |>
 filter( fr_tot > 0,
         !is.na(day_of_year) )

quantile(df_fr$fr_tot, 0.95) 
# # remove feeding ratios above the 95th percentile 
df_95 <- df_fr |>
  filter(fr_tot <= 0.11)

quantile(df_fr$fr_tot, 0.99) 
# # remove feeding ratios above the 99th percentile 
df_99 <- df_fr |>
  filter(fr_tot <= 0.3)

df_99 |>
  dplyr::select(fr_tot) |>
  ggplot(aes(fr_tot)) +
  geom_histogram(bins = 100)
 
# 95th percentile model
mesh <- make_mesh(df_95, c("X", "Y"), cutoff = 6)
# missing years
my <- min(df_95$year):max(df_95$year)
missing_years <- my[!my %in% unique(df_95$year)]

Mod_n_95 <- 
  sdmTMB(
  data = df_95,
  formula = fr_tot ~ 0 + s(doy_sc, bs = "cc") + depth_sc, 
  time_varying = ~ 1 + pred_length_sc,
  extra_time = missing_years,
  time = "year", 
  mesh = mesh,
  spatial = "off",
  spatiotemporal = "off",
  family = Gamma(link = "log")
)

# 99th percentile model
mesh <- make_mesh(df_99, c("X", "Y"), cutoff = 6)
# missing years
my <- min(df_99$year):max(df_99$year)
missing_years <- my[!my %in% unique(df_99$year)]

Mod_n_99 <- 
  sdmTMB(
  data = df_99,
  formula = fr_tot ~ 0 + s(doy_sc, bs = "cc") + depth_sc, 
  time_varying = ~ 1 + pred_length_sc,
  extra_time = missing_years,
  time = "year", 
  mesh = mesh,
  spatial = "off",
  spatiotemporal = "off",
  family = Gamma(link = "log")
)

sanity(Mod_n_95)
sanity(Mod_n_99)

AIC(Mod_n_95)
AIC(Mod_n_99)

res_Mod_n_95 <- mcmc_res <- residuals(Mod_n_95, type = "mle-mcmc", mcmc_samples =  sdmTMBextra::predict_mle_mcmc(Mod_n_95, mcmc_iter = 201, mcmc_warmup = 200))
res_Mod_n_99 <- mcmc_res <- residuals(Mod_n_99, type = "mle-mcmc", mcmc_samples =  sdmTMBextra::predict_mle_mcmc(Mod_n_99, mcmc_iter = 201, mcmc_warmup = 200))

r_df <- bind_rows(data_frame(res = residuals(Mod_n_95, "mle-mcmc", mcmc_samples = res_Mod_n_95),  typer = "mcmc_95"),
                  data_frame(res = residuals(Mod_n_99, "mle-mcmc", mcmc_samples = res_Mod_n_99),  typer = "mcmc_99"),
                  data_frame(res = residuals(Mod_n_95),  typer = "reg_95"),
                  data_frame(res = residuals(Mod_n_99),  typer = "reg_99"))

ggplot(r_df, aes(sample = res)) +
  stat_qq(shape = 1) +
  stat_qq_line() +
  facet_wrap(~typer) +
  labs(y = "Sample Quantiles", x = "Theoretical Quantiles",  title = "Gamma")


```
The gamma can produce a nice fit if high fr are left out and we use reular and not mcmc based resudiuls. I need to reevaluate my choice of family. A cutoff of 0.37 (99th perc.) creates non finite residual values using the gamma which a cutoff of 0.3 does not. If I were to g with gamma family, I chose 0.3 as a cutoff which is somewhere in between the 98th and 99th percentile as this includes uncommon high fr-values without producing infinite residual values. A higher percentile seems to produce a somewhat beter fit. *And what a difference using mcmc instead of the regular ones*.

## Lognormal 
Now compare with lognormal...

```{r lognormal 95 vs 99}
# 95th percentile model
mesh <- make_mesh(df_95, c("X", "Y"), cutoff = 6)
# missing years
my <- min(df_95$year):max(df_95$year)
missing_years <- my[!my %in% unique(df_95$year)]

Mod_n_95 <- 
  sdmTMB(
  data = df_95,
  formula = fr_tot ~ 0 + s(doy_sc, bs = "cc") + depth_sc, 
  time_varying = ~ 1 + pred_length_sc,
  extra_time = missing_years,
  time = "year", 
  mesh = mesh,
  spatial = "off",
  spatiotemporal = "off",
  family = lognormal(link = "log")
)

# 99th percentile model
mesh <- make_mesh(df_99, c("X", "Y"), cutoff = 6)
# missing years
my <- min(df_99$year):max(df_99$year)
missing_years <- my[!my %in% unique(df_99$year)]

Mod_n_99 <- 
  sdmTMB(
  data = df_99,
  formula = fr_tot ~ 0 + s(doy_sc, bs = "cc") + depth_sc, 
  time_varying = ~ 1 + pred_length_sc,
  extra_time = missing_years,
  time = "year", 
  mesh = mesh,
  spatial = "off",
  spatiotemporal = "off",
  family = lognormal(link = "log")
)
sanity(Mod_n_95)
sanity(Mod_n_99)

AIC(Mod_n_95)
AIC(Mod_n_99)

res_Mod_n_95 <- mcmc_res <- residuals(Mod_n_95, type = "mle-mcmc", mcmc_samples =  sdmTMBextra::predict_mle_mcmc(Mod_n_95, mcmc_iter = 201, mcmc_warmup = 200))
res_Mod_n_99 <- mcmc_res <- residuals(Mod_n_99, type = "mle-mcmc", mcmc_samples =  sdmTMBextra::predict_mle_mcmc(Mod_n_99, mcmc_iter = 201, mcmc_warmup = 200))

r_df <- bind_rows(data_frame(res = residuals(Mod_n_95, "mle-mcmc", mcmc_samples = res_Mod_n_95),  typer = "mcmc_95"),
                  data_frame(res = residuals(Mod_n_99, "mle-mcmc", mcmc_samples = res_Mod_n_99),  typer = "mcmc_99"),
                  data_frame(res = residuals(Mod_n_95),  typer = "reg_95"),
                  data_frame(res = residuals(Mod_n_99),  typer = "reg_99"))


ggplot(r_df, aes(sample = res)) +
  stat_qq(shape = 1) +
  stat_qq_line() +
  facet_wrap(~typer) +
  labs(y = "Sample Quantiles", x = "Theoretical Quantiles",  title = "Lognormal")

```
The log normal makes for a way better fit and again, a higher cutoff seems better than a lower. I switch to log normal and use th 99th percentile (fr cutoff = 0.37).

## Appendix. ggplot + stat_qq vs qqnorm()

Does plotting approach affect visual interpretation... not really, but squeezing four facets on the same space as one qqnorm makes it a bit harder to see the patterns. 

```{r}
r_df |>
  filter(typer == "reg_95") |>
  ggplot( aes(sample = res)) +
  stat_qq(shape = 1) +
  stat_qq_line() +
  labs(y = "Sample Quantiles", x = "Theoretical Quantiles",  title = "Lognormal")

qqnorm(residuals(Mod_n_95), main="regular 95")
qqline(residuals(Mod_n_95))
```


