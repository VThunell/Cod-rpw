---
title: "Total prey weight model fit"
author: "Viktor Thunell (& Max)"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format: 
  html:
    page-layout: full
    embed-resources: true
knitr: 
  opts_chunk:
    fig.align: center
    out-width: 80%
editor: source
execute: 
  echo: true
  eval: true
  cache: true
---

## Load libraries

```{r libs}
#| message: false
#| warning: false
#| cache: false

# Load libraries, install if needed
pkgs <- c("tidyverse", "tidylog", "devtools", "sdmTMB", "sdmTMBextra", "terra", "mapplots", "viridis", "visreg", "modelr", "future", "kableExtra", "ggh4x", "patchwork", "furrr") 

if(length(setdiff(pkgs,rownames(installed.packages()))) > 0){

    install.packages(setdiff(pkgs, rownames(installed.packages())), dependencies = T)
  
  }

invisible(lapply(pkgs, library, character.only = T))

# Import some plotting functions
# Source code for map plots
# You need:
# devtools::install_github("seananderson/ggsidekick") # not on CRAN; library(ggsidekick)
devtools::source_url("https://raw.githubusercontent.com/VThunell/Lammska_cod-fr/main/R/functions/map-plot.R")
options(ggplot2.continuous.colour = "viridis")
#remotes::install_github("pbs-assess/sdmTMBextra", dependencies = TRUE)
# install.packages("remotes")
#remotes::install_github("pbs-assess/sdmTMB", dependencies = TRUE)


library(ggsidekick)
theme_set(theme_sleek())

# Set path
home <- here::here()
```

```{r load cache}
# To load entire cache in interactive r session, do: 
# qwraps2::lazyload_cache_dir(path = paste0(home, "/R/main-analysis/03-fit-diet-models_cache/html"))
```

## Read stomach data and prediction grid

```{r}
#| message: false
#| warning: false
#| cache: false

df <- read_csv(paste0(home, "/data/clean/stomachs.csv")) |>
  mutate(depth_sc = (depth - mean(depth))/sd(depth),
         herring_sc = (herring - mean(herring))/sd(herring),
         saduria_sc = (saduria - mean(saduria))/sd(saduria),          
         sprat_sc = (sprat - mean(sprat))/sd(sprat),
         other_invert_sc = (other_invert - mean(other_invert))/sd(other_invert),
         other_sc = (other - mean(other))/sd(other),
         other_fish_sc = (other_fish - mean(other_fish))/sd(other_fish),
         benth_fish_sc = (benth_fish - mean(benth_fish))/sd(benth_fish),
         year_f = as.factor(year),
         month_f = as.factor(month),
         ices_rect = as.factor(ices_rect),
         pred_length_sc = (pred_length - mean(pred_length)) / sd(pred_length),
         doy_sc = ifelse(!is.na(day_of_year), (day_of_year - mean(day_of_year, na.rm = TRUE))/sd(day_of_year, na.rm = TRUE), NA)) |> 
  rowwise() |> 
  mutate(tot = sum(other, other_invert, benth_fish, other_fish, saduria, sprat, herring))

glimpse(df)


pred_grid <- bind_rows(readRDS(paste0(home, "/data/clean/pred_grid_(1_2).rds")),
                       readRDS(paste0(home, "/data/clean/pred_grid_(2_2).rds")))
plot_map +
  geom_raster(data = pred_grid, aes(X*1000, Y*1000, fill = depth))

```


## Filter

```{r filter}

# remove empty stomachs and day of year that are NA
df_tot <- df |>
  filter( !is.na(day_of_year),
          fr_tot > 0 & fr_tot <= 0.37,
          tot > 0) |>
 mutate(decade = round(year/10) * 10)

# mesh
mesh_tot <- make_mesh(df_tot, c("X", "Y"), cutoff = 6)
 
# reduce number of years to reduce fitting time
# df_tot_sel <- df_tot |> filter( year %in% c(2012:2022))
# mesh_tot_sel <- make_mesh(df_tot, c("X", "Y"), cutoff = 6)

# missing years
my <- min(df_tot$year):max(df_tot$year)
missing_years <- my[!my %in% unique(df_tot$year)]

df_tot |>
  ggplot(aes(pred_length,fr_tot, color = year)) +
  geom_point() +
  labs(title = "feeeding ratio, 0 to 0.37 (99th percentile)")

```

# Change in total prey weight over predator length and time:

```{r}
df_tot |> 
  ggplot(aes(pred_length, tot, color = year))  +
  geom_point() +
  stat_smooth(method = "gam", formula = y ~ s(x, k=3)) +

df_tot |>
  group_by(year) |> 
  summarise(mean_tot = mean(tot),
            sd_tot = sd(tot)) |>
  ggplot(aes(year, mean_tot)) +
  geom_line() +
  geom_ribbon(aes(ymin = mean_tot - sd_tot, ymax = mean_tot + sd_tot), alpha = 0.3) +
  scale_x_continuous(breaks = seq(min(df_tot$year), max(df_tot$year), by = 10))
  
# TODO  HERE plot doy effects and over time
```


```{r fit Mods}

# fitting without spatial and spatiotemporal effects takes 15 sec, spatial model 20. AR1 spatiotemporal model 4 hours.

Mod_n <- 
  sdmTMB(
  data = df_tot,
  formula = tot ~ 0 + s(doy_sc, bs = "cc") + depth_sc, 
  time_varying = ~ 1 + pred_length_sc,
  extra_time = missing_years,
  time = "year", 
  mesh = mesh_tot,
  spatial = "off",
  spatiotemporal = "off",
  family = lognormal(link = "log")
)

Mod_s <- 
  sdmTMB(
  data = df_tot,
  formula = tot ~ 0 + s(doy_sc, bs = "cc") + depth_sc, 
  time_varying = ~ 1 + pred_length_sc,
  extra_time = missing_years,
  time = "year", 
  mesh = mesh_tot,
  spatial = "on",
  spatiotemporal = "off",
  family = lognormal(link = "log")
)

# time <- Sys.time()
# 
# Mod <-
#   sdmTMB(
#   data = df_tot,
#   formula = fr_tot ~ 0 + s(doy_sc, bs = "cc") + depth_sc,
#   time_varying = ~ 1 + pred_length_sc,
#   extra_time = missing_years,
#   time = "year",
#   mesh = mesh_tot,
#   spatial = "on",
#   spatiotemporal = "ar1",
#   family = lognormal(link = "log")
# )
# 
# Sys.time() - time
# saveRDS(Mod, file = paste0("fr-tot_Mod_ar1_b",Sys.Date(),".rds"))
#Mod <- readRDS(Mod, file = paste0("fr-tot_Mod_ar1_b2024-03-14.rds"))

sanity(Mod_n)
sanity(Mod_s)
#sanity(Mod)

AIC(Mod_n)
AIC(Mod_s)
#AIC(Mod) # lowest AIC

# Mod_res <- sdmTMBextra::predict_mle_mcmc(Mod, mcmc_warmup = 200, mcmc_iter = 201)
# qqnorm(residuals(Mod, "mle-mcmc", mcmc_samples = Mod_res))
# qqline(residuals(Mod, "mle-mcmc", mcmc_samples = Mod_res))
# tidy(Mod, effects = "ran_pars", conf.int=TRUE) 

```

```{r plot coefficients for Mod}

# Coefficient estimate of year
Mod_n_tv_est <- as.list(Mod_n$sd_report, "Estimate")
Mod_n_tv_se <- as.list(Mod_n$sd_report, "Std. Error")

Mod_s_tv_est <- as.list(Mod_s$sd_report, "Estimate")
Mod_s_tv_se <- as.list(Mod_s$sd_report, "Std. Error")

# Mod_tv_est <- as.list(Mod$sd_report, "Estimate")
# Mod_tv_se <- as.list(Mod$sd_report, "Std. Error")

y_n_Mod <- data.frame(year = sort(unique(Mod_n$data$year)), coef.est = Mod_n_tv_est$b_rw_t[,1,], coef.se = Mod_n_tv_se$b_rw_t[,1,], model = "nos")
y_s_Mod <- data.frame(year = sort(unique(Mod_s$data$year)), coef.est = Mod_s_tv_est$b_rw_t[,1,], coef.se = Mod_s_tv_se$b_rw_t[,1,], model = "spatial")
# y_Mod <- data.frame(year = sort(unique(Mod$data$year)), coef.est = Mod_tv_est$b_rw_t[,1,], coef.se = Mod_tv_se$b_rw_t[,1,], model = "spatiotemporal")

bind_rows(y_s_Mod, y_n_Mod) |>
  ggplot(aes(year, exp(coef.est), color = model)) +
  geom_line() +
  #geom_ribbon(aes(ymin = exp(coef.est-1.96*coef.se), ymax = exp(coef.est+1.96*coef.se)), alpha = 0.3) +
  scale_x_continuous(breaks = seq(min(df_tot$year), max(df_tot$year), by = 10)) +
  ylab("est for year") # the cf gets very large for the missing year

# Coefficient of length varying with year
ypl_Mod_n <- data.frame(year = sort(unique(Mod_n$data$year)), coef.est = Mod_n_tv_est$b_rw_t[,2,], coef.se = Mod_n_tv_se$b_rw_t[,2,], model = "nos")
ypl_Mod_s <- data.frame(year = sort(unique(Mod_s$data$year)), coef.est = Mod_s_tv_est$b_rw_t[,2,], coef.se = Mod_s_tv_se$b_rw_t[,2,], model = "spatial")
# ypl_Mod <- data.frame(year = sort(unique(Mod$data$year)), coef.est = Mod_tv_est$b_rw_t[,2,], coef.se = Mod_tv_se$b_rw_t[,2,], model = "spatiotemporal")


bind_rows(ypl_Mod_s, ypl_Mod_n) |>
ggplot(aes(year, exp(coef.est), color = model)) +
  geom_line() +
  #geom_ribbon(aes(ymin = exp(coef.est-1.96*coef.se), ymax = exp(coef.est+1.96*coef.se)), alpha = 0.3) +
  scale_x_continuous(breaks = seq(min(df_tot$year), max(df_tot$year), by = 10)) +
  ylab("est for pred.length") 


```


```{r index}
nd_pred_grid <- pred_grid |>
  mutate(depth_sc = (depth - mean(depth))/sd(depth),
         doy_sc = 0,
         pred_length_sc = 0)

ncells <- filter(nd_pred_grid, year == max(nd_pred_grid$year)) |> nrow()

pred_Mod_s <- predict(Mod_s, newdata = nd_pred_grid, return_tmb_object = TRUE)

index_s <- get_index(pred_Mod_s, area = 1/ncells, bias_correct = TRUE)

index_s  |>
  ggplot(aes(year, est)) +
  geom_line() +
  geom_point(shape = 21, alpha = 0.7) +
  geom_ribbon(aes(ymin = lwr, ymax = upr), alpha = 0.4, width = 0)
```

