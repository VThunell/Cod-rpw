---
title: "Prepare stomach content data for Lammska analysis"
author: "Max Lindmark & Viktor Thunell"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format: 
  html:
    embed-resources: true
    fig-width: 8
    #fig-asp: 0.618
knitr: 
  opts_chunk:
    fig.align: center
editor: source
execute: 
  echo: true
  eval: true
  cache: false
---

## Load libraries

```{r libs}
#| message: false
#| warning: false
library(tidyverse)
library(tidylog)
library(janitor)
library(devtools)
library(sdmTMB)
library(patchwork)
library(terra)

# Import some plotting functions
# Source code for map plots
# You need: devtools::install_github("seananderson/ggsidekick") # not on CRAN; library(ggsidekick)
devtools::source_url("https://raw.githubusercontent.com/maxlindmark/pred-prey-overlap/main/R/functions/map-plot.R")
options(ggplot2.continuous.colour = "viridis")

# Set path
home <- here::here()
```

## Read data

I downloaded all stomach data from the Baltic, all countries (year 1963-2021), at 16:21  Jan 15 2024. Here's a test script to prepare those data.

The aim of the script is to create a response variable that is the individual level weight ratio of saduria, herring and sprat (separately) to cod. Hence we need, per predator stomach (cod), the total weight (VT:?? or individual) of these species, and if they are absent, weight should be 0 (VT: NA or 0, see code below). We also need coordinates for each cod. To get there, we need to do the following:

1. Read in data
    a. downloaded data from ICES stomach database
    b. complete new with old database data (since large are still not been uploaded)
    c. add additional newer data and make data set with one row per prey item
2. Some renaming and data cleaning
3. Filter predators with the above prey present and calculate the total weight of these for each predator (one row per predator)
4. Filter predators where these prey are not present. VT??
5. Bind rows, and replace NA with 0 VTY??


```{r read data}
# New database data
fi <- read_csv(paste0(home, "/data/stomach/StomachContent_0115213707/File_information.csv"))
hi <- read_csv(paste0(home, "/data/stomach/StomachContent_0115213707/HaulInformation.csv"), 
               col_types = list(
                 tblUploadID = col_double(),
                 tblHaulID = col_double(),
                 Ship = col_character(),
                 Gear = col_character(),
                 HaulNo = col_double(),
                 StationNumber = col_double(),
                 Year = col_double(),
                 Month = col_double(),
                 Day = col_double(),
                 Time = col_character(),
                 ShootLat = col_double(),
                 ShootLong = col_double(),
                 HaulLat = col_double(),
                 HaulLong = col_double(),
                 ICESrectangle = col_character(),
                 Depth = col_double(),
                 Survey = col_character(),
                 ICESDatabase = col_character(),
                 Notes =  col_character())) # the parsing issues of hi causes no problems but specifying col_types corrects the datatypes. 
pred <- read_csv(paste0(home, "/data/stomach/StomachContent_0115213707/PredatorInformation_edit.csv")) #edited in text editor (not excel or equivalent) to remove three instances of erroneous '"' in column 'Notes' at row 7139,7144 and 7296.
prey <- read_csv(paste0(home, "/data/stomach/StomachContent_0115213707/PreyInformation.csv"))

# DAPSTOM old database data (ODB)
shimmyshimmy <- read_csv(paste0(home, "/data/stomach/StomachDataOld.csv")) 

# New data
# new_db <- read_csv(paste0(home, "/data/stomach/StomachDataNew.csv")) 
```
## New database data (DAPSTOM 6.3, dowloaded Jan 15 2024)
Start with new database data. Have a look at the data... The description of the data can be found here: <http://datsu.ices.dk/web/selRep.aspx?Dataset=157>

```{r quick glimpse new data}
names(fi)
names(hi)
names(pred)
names(prey)
```

## Join all data files in DAPSTOM 6.3 (new db)
We do this in a specific order: fi -> hi -> pred -> prey.

For some joins, there are multiple column names shared in addition to the key that I could remove and keep only the ID key and the non-shared columns but instead I keep them. First I need to ensure they are the same (VT what is the same and how do you do this?), and not only have the same name. Will also check if both datasets have the same amount of NA before choosing which column to carry from which dataset.

```{r}
hifi <- left_join(hi, fi, by = "tblUploadID") # join hail data with file info

comcol_hifi_pred <- intersect(colnames(pred), colnames(hifi))

# Check if any of the two datasets have NA in the common columns
unique(is.na(hifi |> dplyr::select(all_of(comcol_hifi_pred))))
unique(is.na(pred |> dplyr::select(all_of(comcol_hifi_pred))))

# Nope, but the column Notes does have different meanings so we will remove Notes before joining
str(prey)
pred <- left_join(pred |> dplyr::select(-Notes), # join in predator data
                  hifi |> dplyr::select(-Notes),
                  by = comcol_hifi_pred[!comcol_hifi_pred == "Notes"])
```

Now let's join predator data to prey data following the same procedure.

```{r}
intersect(colnames(pred), colnames(prey))

# Length is a common column, but it corresponds to predator or prey. Rename!
pred <- pred |> rename(pred_length = Length)
prey <- prey |> rename(prey_length = Length)

comcol_prey_pred <- intersect(colnames(pred), colnames(prey))

# Check if any of the two datasets have NA in the common columns
unique(is.na(pred |> dplyr::select(all_of(comcol_prey_pred))))
unique(is.na(prey |> dplyr::select(all_of(comcol_prey_pred))))

# Rename "Notes" in prey data to avoid confusion as to which dataset it belongs to
prey <- prey |> rename(prey_notes = Notes)

# In the Swedish data, 2 means regurgitated and 1 is intact, but for the rest, 1 means regurgitated, 0 or NA means intact. All NA values are from 2020 and 2021 and for all regurguitated=0 before 2005 (see Neuenfeldt 2020 discussion) we dont know if they are truly not regurgitated. Therefore there is not much info of value from the regurgitated column. 
pred <- pred |>
  mutate(Regurgitated_st = Regurgitated,
         Regurgitated_st = ifelse(Country == "SE" & Regurgitated_st == 2, 1, Regurgitated_st))

# Regurgitated stomachs are only about 2% and come from 2021, 2018 and 2013 (and 1 in 1981). The NAs are from 2020 and 2021.
pred |>
  #group_by(Regurgitated_st) |>
  group_by(Year, Regurgitated_st) |>
  summarize(count = n())

# There are regurgitated stomachs (column in pred) have information in prey info, i.e. either its incorrect or they have signs of regurgitation but prey in the stomach.
regurg_ids <- pred |>
  filter(Regurgitated_st == 1)
prey |> filter(tblPredatorInformationID %in% regurg_ids$tblPredatorInformationID) #|> distinct(Weight, AphiaIDPrey, Year) |> as.data.frame()
 
#Remove regurgitated stomachs from pred and prey to reduce issues with the predator prey ratio becoming incorrect.
pred <- pred |>
  filter(!tblPredatorInformationID %in% regurg_ids$tblPredatorInformationID)
prey <- prey |>
  filter(!tblPredatorInformationID %in% regurg_ids$tblPredatorInformationID)

# Join in pred info into prey. There are rows only in pred (y) that are not in prey. These are either empty, regurgitated or incorrect. Empties will be added later.
d <- left_join(prey, pred, by = c(comcol_prey_pred))

```

## Calculate total weight of specific prey species by unique predator ID

Next we need to summarize our prey weights by predator and prey group. First filter stomachs where these prey (herring, sprat and saduria) are present. Create a new common name column to make life easier... 

```{r}
#| message: false

selected_prey <- d |> 
  mutate(common_prey_name = NA,
         common_prey_name = ifelse(AphiaIDPrey %in% c(293743, 1625944, 126425, 322683, 236448), "sprat", common_prey_name),
         common_prey_name = ifelse(AphiaIDPrey == 126417, "herring", common_prey_name),
         common_prey_name = ifelse(AphiaIDPrey %in% c(293511, 119034), "saduria", common_prey_name),
         common_prey_name = ifelse(!AphiaIDPrey %in% c(293743, 1625944, 126425, 322683, 236448, 126417, 293511, 119034), "other", common_prey_name)) ## |> 

# The Regurgitated_st and StomachEmpty are still in the data so I need to add the nonEmpty
# empty_stom <- d |> 
#   filter(!tblPredatorInformationID %in% unique(selected_prey_present$tblPredatorInformationID))
# empty_stom |>
# filter(AphiaIDPrey %in% c(293743, 1625944, 126425, 322683, 236448, 126417, 293511, 119034))

# Negative numbers are likely because they couldn't be counted only weighed
#selected_prey_present |> distinct(Count) |> arrange(Count)
# #VT: 59 zero weights in the data from ices 15/1 2024! Ifgthere are zeros, Max finds NAs make more sense to have zeros could be rounding errors because they are present, whereas the former could be because it simply wasn't weighed)
# selected_prey_named |> filter(Weight == 0)
# selected_prey_named |> filter( is.na(Weight))
```

For NA and zero weights, we estimate weight if length is present. If length is not `NA` and Weight is 0 or NA, estimate weight based on length and Count. Else give weight `NA` and drop it. Because these are not true empty, else there wouldn't be species-information

```{r}
# Estimate weight based on count. In the data, if count is >1, the weight is grouped.  In some cases, all of Weight, Count and prey_length is NA, i.e. there are presences of prey but no information for calculating the total weight or there is a length but no count (0) which we will treat as one and retrieve a weight, I think this is less wrong.

# Calculate weight of prey given count and prey length
selected_prey <- selected_prey |> 
  mutate(prey_length = ifelse(UnitLngt == "mm" & prey_length >= 0, prey_length/10, prey_length)) |> 
  mutate(Weight = replace_na(Weight, -9),
         Count = replace_na(Count, -9),
         prey_length = replace_na(prey_length, -9)) |> # Because there is both negative values and NAs
  mutate(Count = ifelse(prey_length > 0 & Count <= 0, 1, Count)) |> # VT When there is a prey_length but Count <= 0
  mutate(prey_weight_source = ifelse(Weight <= 0 & prey_length > 0 & Count >= 0 , "estimated", "observed")) |> 
  mutate(Weight = ifelse(prey_weight_source == "estimated", (0.01*prey_length^3)*Count, Weight))

selected_prey |> filter(Weight == 0 & common_prey_name != "other") |> select(common_prey_name, Weight, prey_length, Count)
# Even if we estimate the prey weight based on the length of the prey and the number of the prey, we still have 168 rows that Weight == -9 or 0. We can give them the average weight (for herring, sprat and saduria but not "other"). This may produce outliers when the predator is small compared to the avg prey size and but these would be removed in a later cleaning stage. Lets do this for all but "other" and remove those lines in "other.
prey_avg_ind_weight <- selected_prey |>
  filter(Weight > 0 & Count > 0) |>
  group_by(common_prey_name) |>
  mutate(ind_weight = Weight / Count)

# Of course there are obvious issues....  VT: what issues do you see Max aprt from the extreme wights?
prey_avg_ind_weight |>
  ggplot(aes(ind_weight)) +
  facet_wrap(~common_prey_name, ncol = 3, scales = "free") +
  geom_histogram()

# TODO: 893 g sprat? Doubt it! 
prey_avg_ind_weight |>
  filter(common_prey_name == "sprat") |> 
  filter(ind_weight > 100) |> as.data.frame() 

# TODOVT: Saduria above 10 g, Doubt it! 
prey_avg_ind_weight |>
  filter(common_prey_name == "saduria") |> 
  filter(ind_weight > 10) |> as.data.frame() 
#VT: Many saduria is way off, mean weights of 1 g. max weight of 7,8 or 9? (https://doi.org/10.1111/j.0021-8790.2004.00800.x and https://www.jstor.org/stable/24831823 ) . Can be calcluated from Sharkweb data. how to deal with the outliers?

# Remove them, summarize and take average
prey_avg_ind_weight <- prey_avg_ind_weight |>
  filter(!(common_prey_name == "sprat" & ind_weight > 800)) |> #remove the big sprat
  filter(!(common_prey_name == "saduria" & ind_weight > 10)) |> #remove the big saduria
  group_by(common_prey_name) |> 
  summarise(avg_weight = mean(ind_weight))

# This should be the average prey weight which we can use to calculate the weight of these prey if we have the counts. Left join that summarized data and do the estimate of weight based on length. But first figure out which unit prey size is

# Join average weight and estimate weight
selected_prey_clean <- selected_prey |> 
  left_join(prey_avg_ind_weight) |> 
  mutate(Weight = ifelse(Weight <= 0 & Count > 0 & common_prey_name != "other", Count * avg_weight, 
                         ifelse(Weight <= 0 & Count > 0 & common_prey_name == "other", NA, Weight)))
  
# Remove the negative weights (124 rows, >1%)! Keep the ID's though because we also want to remove these from the full data set so that we don't inflate the total number of empty stomachs, because these are not actually empty. #This removes 33 rows
ids_to_remove <- selected_prey_clean |> filter(Weight <= 0)
ids_to_remove |> as.data.frame() |> distinct(Weight, prey_length, Count)

selected_prey_clean <- selected_prey_clean |> filter(Weight >= 0)
# TODO: really, can't be 0 count or 0 length or 0 weight... Has to be NA comon
```

With these estimates of weight based on either length or worst case, average weight of that prey, we calculate the total weight of these prey per individual predator stomach, and then pivot wider. 

```{r}
selected_prey_summed <- selected_prey_clean |> 
  group_by(tblPredatorInformationID, common_prey_name) |> 
  summarise(tot_weight = sum(Weight)) |> 
  ungroup()

selected_prey_summed <- selected_prey_summed |> 
  pivot_wider(names_from = "common_prey_name", values_from = "tot_weight", values_fill = 0) # Set `values_fill = 0` to make zeros instead of NAs.
```

Next I will `left_join` in the remaining predator information, and after that `bind_rows` "empty stomachs" (with respect to these 3 prey species). Since the IDs are not overlapping, it doesn't matter that I already have some 0's here for some species

```{r}
selected_prey_summed <- 
  selected_prey_summed |> 
  left_join(pred, by = "tblPredatorInformationID") |> 
  drop_na(pred_length) 

t <- selected_prey_summed |>
  select("other","saduria","herring","sprat") |>
  rowSums() == 0
which(t) # one empty stomach..
```
Now add in the "empty stomachs" from pred using bind_rows. When I `bind_rows`, the columns that are not matching get `NA`. The only column not matching should be the average weight columns. They will get `NA`, and I'll change it to 0.

```{r}
# The empty stomachs to be added are those that are empty in predator data. For data before 2005 we don't know whether they are regurgitated or empty because of not eating. For an analysis using all data (1963-) we need to keep that in mind.
# Because of the issue of not getting prey weight even though they are present above, we need to make sure to drop these stomachs in the full data set also before joining, so that we don't treat them as empty!

# StomachEmpty = 1 is an empty stomach even though this is not an mandatory paramter (?). Since regurgitated==1 and NA have been removed, all empty stomachs seem to be truly empty, i.e. there are no tblpredatorinformationIDs with stomach empty that are in the prey data (No overlap in stomachs between the predator and prey data sets).
empty_stom <- pred |> 
 #filter(Regurgitated_st == 0 | is.na(Regurgitated_st)) |> # removed earlier
 filter(StomachEmpty == 1) |>
 filter(!tblPredatorInformationID %in% unique(selected_prey_summed$tblPredatorInformationID))

# Bind rows!
dd <- selected_prey_summed |> 
  bind_rows(empty_stom)

# Sweden and Denmark report in kg
ggplot(dd, aes(IndWgt)) + 
  facet_wrap(~Country, scales = "free") + 
  geom_histogram()

dd <- dd |> 
  mutate(IndWgt = ifelse(Country %in% c("DK", "SE"), IndWgt*1000, IndWgt))

dd |> # Note the one data point in 1989
  ggplot(aes(IndWgt)) + 
  facet_wrap(~Year, scales = "free") +
  geom_histogram()

# Yes, works as intended, see the added NAs in the selected prey weights. Make them 0!
dd <- dd |> 
  mutate(other = replace_na(other, 0),
         sprat = replace_na(sprat, 0),
         herring = replace_na(herring, 0),
         saduria = replace_na(saduria, 0))

# Remove non cod predators (e.g. Whiting 126438)
dd <- dd |> filter(AphiaIDPredator %in% c(126436))

ggplot(dd, aes(pred_length, IndWgt)) + # 0, negative or NAs weight ewith lengths
  geom_point()

# Estimate predator weight if we have their length?
dd <- dd |> 
  mutate(IndWgt = replace_na(IndWgt, 0),
         pred_weight_source = ifelse(IndWgt <= 0, "estimated", "observed"),
         IndWgt = ifelse(pred_weight_source == "estimated", 0.01*pred_length^3, IndWgt))

dd |> 
  arrange(desc(pred_weight_source)) |>
  ggplot(aes(pred_length, IndWgt, col = pred_weight_source)) +
  geom_point(shape = 4)

```

## Old database data

The data in the old ICES database contains much more data than what is found in the new version of the database (DAPSTOM 6.3) but is in poor shape containing many errors and unique identiifers are missing. Below, identieferies for hauls and predators are made and the old db is cleaned.

```{r}

glimpse(shimmyshimmy)
# Each row in old data contains a prey item, i.e. we have many rows for each predator and there is no unique predator ID. We need to generate an identifier so that we can compare observations the old and new data. The ICESsampleID is for the predator I assume, ICESitmeID are prey items but there are duplicates, possibly mainly due to the two data sets (Year of stomach and Stomach tender d using the same IDs which become duplicates?).  
# By creating an ID with Date (Year, Month and Day), Country and Haul (Haul (new data) and HaulNo (old data)) we can identify the data missing from the new database. Ship info in the old data is unclean, by instead assuming that Country should be unique to date and haul (sort of Country as a proxy for Ship). However, there are 41506 rows where country and ship is missing. VT removes these. 
#length(is.na(old_db[which(is.na(old_db$Country)),]$Ship))

old_db <- janitor::remove_empty(shimmyshimmy, which = "cols") # remove cols with only Nas to increase readability

old_db <- old_db |>
  mutate(Country = ifelse(Country == "Latvia", "LV",
                            ifelse(Country == "Denmark", "DK", 
                                   ifelse(Country == "Poland", "PL", 
                                          ifelse(Country == "Sweden", "SE",
                                                 ifelse(Country == "Germany", "DE", 
                                                        ifelse(is.na(Country), "NA", "NotBaltic") ))))))

length(which(is.na(old_db$Country)))
length(which(is.na(old_db$Haul)))
length(which(is.na(old_db$ICES_StatRec)))

# we get rid of NAs in Country and almost (198) all in Haul by excluding based on lat lon and Country
# filter and create identifier
old_data <- old_db |> 
  rename(HaulNo = Haul,
         ICESrectangle = ICES_StatRec) |> 
  filter(Predator_AphiaID %in% c(126436)) |> # remove non cods
  filter(between(Latitude, 53, 65.5) & between(Longitude, 10, 24)) |> # ymin = 52; ymax = 60.5; xmin = 10; xmax = 24
  #filter(!Country == "NotBaltic") |> # Not needed to remove obvious not Baltic data
  mutate(Haul_ID = paste(Country, Year, Month, Day, HaulNo, ICESrectangle, sep = "_"))

# join hi and fi from new db to get columns for identifier
#hi_temp <- left_join(hi, fi, by = "tblUploadID")

# add Country and ICESrectangle to prey data from haul data and create identifier
prey_temp <- prey |>
  left_join(select(hifi, tblUploadID, Country, ICESrectangle), by = "tblUploadID", multiple = "any") |>
  mutate(Haul_ID = paste(Country, Year, Month, Day, HaulNo, ICESrectangle, sep = "_"))

# identify cod in hauls in the baltic not present in the new data 
missing_db <- old_data |>
  anti_join(prey_temp, by = "Haul_ID") # return all rows from x (old_d) without a match in y (prey)

# fix predator lengths and weights
missing_db2 <- missing_db |> 
  rename(pred_length = `Predator_Lengh(mean)`,
         pred_weight = `Predator_Weight(mean)`) |>
  mutate(pred_weight_source = ifelse( is.na(pred_weight) | pred_weight <= 0, "estimated", "observed")) |> 
  mutate(pred_weight = ifelse( is.na(pred_weight) | pred_weight <= 0, (0.01*pred_length^3), pred_weight)) 

# fix prey lengths and weights
missing_db2 <- missing_db2 |> 
  rename(count_prey = Prey_TotalNo,
         prey_length = Prey_LowerLengthBound, # this is the only prey length there is in the old db.
         prey_weight = Prey_Weight) |>
  mutate(prey_weight_source = ifelse(is.na(prey_weight) | prey_weight <= 0 & count_prey >= 0 , "estimated", "observed")) |>
  mutate(prey_weight = ifelse( is.na(prey_weight) | prey_weight <= 0, (0.01*prey_length^3)*count_prey, prey_weight)) |>
  mutate(prey_weight_ind = prey_weight / count_prey)

missing_db3 <- missing_db2 |> # remove zero weight predators and those woth empty stomachs, make predator identifier. 97722 unique predators
  filter( pred_weight > 0) |>
  mutate(pred_ID = paste(Haul_ID, `SampleNo(FishID)`, sep = "_")) |>
  mutate(empty_stom = ifelse(prey_weight <= 0 | is.na(prey_weight), 1, 0)) 
  
unique(missing_db3$Prey_LatinName) # names seems ok
unique(is.na(missing_db2$Predator_LatinName)) # No nas in latin name.

missing_db3 <- missing_db3 |>
  mutate(common_prey_name = ifelse( Prey_LatinName %in% "Sprattus sprattus", "sprat", 
                                    ifelse(Prey_LatinName %in% "Clupea harengus", "herring", 
                                           ifelse(Prey_LatinName %in% "Saduria entomon", "saduria", "other"))))

# No duplicates?
missing_db3 |> group_by(Haul_ID) |> select(-Dataset, -ICES_SampleID) |> #ID, `Predator_Weight(mean)`) |> 
  duplicated() |> which()

# in the old db,, we have both pred and prey data. This means we need to summarize and then add in pred info from the whole db df. columns that are keep the columns we need we use mutate instead of summarise(). 
length(unique(missing_db3$pred_ID)) # 63070 stomachs if empties are removed

missing_db3_summed <- 
  missing_db3 |> 
  #filter(empty_stom == 0) |> 
  mutate(prey_weight = replace_na(prey_weight, 0)) |> 
  group_by(pred_ID, common_prey_name) |> 
  summarise(tot_weight = sum(prey_weight)) |> 
  #mutate(tot_weight = sum(prey_weight)) |>
  ungroup()

missing_db3_summed <- missing_db3_summed |> 
  pivot_wider( names_from = "common_prey_name", values_from = "tot_weight", values_fill = 0) # `values_fill = 0` to make zeros not NAs

# colnames(missing_db3) selecting columns without prey info in the join.
mm <- missing_db3_summed |> 
   left_join( select(missing_db3, Dataset, Country, Ship, Latitude, Longitude, Estimated_Lat_Lon, ICESrectangle, Year, Month, Day, Time, Station, HaulNo, Depth, 'SampleNo(FishID)', Predator_AphiaID, Predator_LatinName, pred_weight, pred_length, prey_weight, Haul_ID, pred_weight_source, prey_weight_source, pred_ID, empty_stom, common_prey_name), by = "pred_ID", multiple = "first")

mm |> select("other","saduria","herring","sprat") |>
  rowSums() == 0

mm |> count(empty_stom)

mm |> 
  arrange(desc(pred_weight_source)) |>
  ggplot(aes(pred_length, pred_weight, col = pred_weight_source)) +
  geom_point(shape = 4)

# # one third of the data has estimated the coordinates 
# #sum(old_db$Estimated_Lat_Lon == "Yes", na.rm = TRUE)/nrow(old_db) 

```
## Merge old and new data

```{r merge dbs}

# rename ids and add a column to separate new from old database
new_data <- dd |> 
  rename(lat = ShootLat,
         lon = ShootLong,
         pred_weight = IndWgt) |>
  mutate(Haul_ID = as.character(tblHaulID)) |>
  mutate(Day = as.character(Day)) |>
  mutate(Month = as.character(Month)) |>
  mutate(pred_ID = as.character(tblPredatorInformationID)) |>
  mutate(data_source = "new_db")

old_data <- mm |> 
  rename(lat = Latitude,
         lon = Longitude) |>
  mutate(data_source = "old_db")

comcol_newold_pred <- intersect(colnames(new_data), colnames(old_data))

bind_rows( new_data |> select(Year, pred_ID, data_source), 
           old_data |> select(Year, pred_ID, data_source) ) |>
  group_by(Year, data_source) |>
  summarize(count = n()) |>
  ggplot() +
  geom_bar(aes(Year, count, fill = data_source), alpha = 1, stat="identity", position = "stack") +
  scale_x_continuous(n.breaks = 10) +
  ylab("# stomachs")

# Check if any of the two datasets have NA in the common columns. 
unique(is.na(old_data |> dplyr::select(all_of(comcol_newold_pred)))) # depth and time are all NAs and HaulNO we dont need
unique(is.na(new_data |> dplyr::select(all_of(comcol_newold_pred))))

# remove Time, Depth, HaulNo
newold <- full_join(old_data |> dplyr::select(-c(Time, Depth, HaulNo)), # join in predator data
                    new_data |> dplyr::select(-c(Time, Depth, HaulNo)),
                    by = comcol_newold_pred[!comcol_newold_pred %in% c("Time","Depth","HaulNo")])

```


Now calculate feeding ratios of cod. 

```{r}
# Calculate feeding ratios
newold <- newold |> 
  rowwise() |> 
  mutate(fr_sad = saduria / pred_weight,
          fr_spr = sprat / pred_weight,
          fr_her = herring / pred_weight,
          fr_oth = other / pred_weight,
          fr_tot = sum(other, saduria, sprat, herring) / pred_weight)

newold |> 
  dplyr::select(fr_sad, fr_spr, fr_her, fr_oth, fr_tot) |> 
  pivot_longer(everything()) |> 
  ggplot(aes(value)) +
  geom_histogram() +
  facet_wrap(~name, ncol = 1, scales = "free")

newold <- newold |>
  filter(between(fr_spr, 0, 0.5)) |> 
  filter(between(fr_her, 0, 0.5)) |> 
  filter(between(fr_sad, 0, 0.5)) |> 
  filter(between(fr_oth, 0, 0.5)) |> 
  filter(between(fr_tot, 0, 0.5)) 

newold |>
  select(fr_sad, fr_spr, fr_her, fr_oth, fr_tot) |> 
  pivot_longer(everything()) |> 
  ggplot(aes(value)) +
  geom_histogram(bins=100) +
  facet_wrap(~name, ncol = 1, scales = "free")
```

Check the proportion of stomachs without these prey

```{r}
newold %>% 
  pivot_longer(c("herring", "saduria", "sprat","other")) |> 
  group_by(name) |> 
  summarise(prop_empty = sum(value == 0)/n(), 
            prop_not_empty = sum(value != 0)/n())
```

Seems like fairly high proportions of cod without these key species in stomachs, but at least ~half have other prey in their stomachs

```{r}
#| out-width: 100%

# Fix some columns
df <- newold |> 
  rename(ices_rect = ICESrectangle) |> 
  add_utm_columns(ll_names = c("lon", "lat"), utm_crs = 32633) |> 
  dplyr::select(fr_sad, fr_spr, fr_her, fr_oth, fr_tot, Year, Month, Day, pred_weight, pred_length, saduria, sprat, herring, lat, lon, ices_rect, X, Y)#, depth)

# Add quarter
# df <- df |> 
#   mutate(quarter = ifelse(Month == c(1,2,3), 1, 
#                           ifelse(Month == c(4,5,6), 2, 
#                                  ifelse(Month == c(7,8,9), 3, 4))))

# Add sample size per coordinate for plotting
df_plot <- df |>
  group_by(Year, Y, X) |> 
  mutate(sample_size = n(),
         pos_id = paste(Year, X, Y)) |> 
  ungroup() |> 
  distinct(pos_id, .keep_all = TRUE)
  
plot_map_fc +
  geom_point(data = df_plot, aes(X*1000, Y*1000, size = sample_size), alpha = 0.5) +
  facet_wrap(~ Year, ncol = 6) +
  #theme_sleek(base_size = 6) + 
  theme(legend.position = "bottom",
        axis.text.x = element_text(angle = 90)) +
  scale_size(range = c(.01, 2), name = "# stomachs") +
  geom_sf()

ggsave(paste0(home, "/figures/supp/year_diet_map.pdf"), width = 15, height = 15, units = "cm")
```

Add depth

```{r}
dep_raster <- terra::rast(paste0(home, "/data/Mean depth natural colour (with land).nc"))
class(dep_raster)
crs(dep_raster, proj = TRUE)

plot(dep_raster)

df$depth <- terra::extract(dep_raster, df |> dplyr::select(lon, lat))$elevation

ggplot(df, aes(lon, lat, color = depth*-1)) + 
  geom_point()

df$depth <- df$depth*-1

# TODO: these coordinates are waaay off
df <- df |> drop_na(depth)

df |> 
  ggplot(aes(X*1000, Y*1000, color = depth)) + 
  geom_point() +
  NULL

hist(df$depth)

plot_map_fc +
  geom_point(data = df, aes(X*1000, Y*1000, color = depth), alpha = 0.5) +
  theme_sleek(base_size = 6) + 
  geom_sf()

ggplot(df, aes(lon, lat, color = depth)) + 
  geom_point() + 
  coord_sf()
```

```{r}
# Save data
write_csv(df, paste0(home, "/data/clean/stomachs.csv"))
```

```{r}
#| echo: false
#| eval: false
renderthis::to_pdf(paste0(here::here(), "/R/prepare-data/01-test-prepare-stomach-data.html"))
```